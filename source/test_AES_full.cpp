#include "AESfunctions.h"
#include "AEStables.h"

unsigned short stt_lng;

void AES_Encrypt(unsigned char newState[16],
		unsigned char expandedKey[ExtdCipherKeyLenghth_max], unsigned short Nr,
		unsigned char ciphertext[16], unsigned char iv[16]);

const unsigned char rcon[256] = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
		0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91,
		0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33,
		0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
		0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
		0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa,
		0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25,
		0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
		0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4,
		0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
		0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
		0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
		0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
		0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
		0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83,
		0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
		0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91,
		0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33,
		0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d };

// Expanding 16 bytes of key to 176 bytes for 10 rounds
void KeyExpansionCore(unsigned char* in4, unsigned char i) {
	// RotWord rotates left
	// SubWord substitutes with S - Box value
	unsigned char t = in4[0];
	in4[0] = s_box[in4[1]];
	in4[1] = s_box[in4[2]];
	in4[2] = s_box[in4[3]];
	in4[3] = s_box[t];
	// RCon (round constant) 1st byte XOR rcon
	in4[0] = in4[0] ^ rcon[i];
}

void SubWord(unsigned char* in4) {
	// SubWord substitutes with S - Box value
	in4[0] = s_box[in4[0]];
	in4[1] = s_box[in4[1]];
	in4[2] = s_box[in4[2]];
	in4[3] = s_box[in4[3]];
}

void KeyExpansion(unsigned char* inputKey, unsigned short Nk,
		unsigned char* expandedKey) {
	unsigned short Nr = 10; // = 10
	// Copy the inputKey at the beginning of expandedKey
	for (unsigned short i = 0; i < 16; i++) {
		expandedKey[i] = inputKey[i];
	}

	unsigned short byGen = 16;
	unsigned short rconIdx = 1;
	unsigned char temp[4]; //rows = 4

	// Generate expanded keys
	while (byGen < 176) {
		// Read previously generated last 4 bytes (last word)
		for (unsigned short i = 0; i < 4; i++) {
			temp[i] = expandedKey[byGen - 4 + i];
		}
		// Perform KeyExpansionCore once for each 16 byte key
		if (byGen % 16 == 0) {
			KeyExpansionCore(temp, rconIdx);
 			rconIdx++;
		}
		// XOR temp with [bytesGenerated-16] and store in expandedKeys
		for (unsigned short i = 0; i < 4; i++) {
			expandedKey[byGen] = expandedKey[byGen -  16] ^ temp[i];		
			byGen++;
		}
		
	}
}

int main() {
	unsigned short CipherKeyLenghth = 16; 
	unsigned short Nr = 10; // = 10 rounds
	unsigned short ExtdCipherKeyLenghth = 176; // 176 bytes in the expanded cipher key (16 + 16 for 10 rounds each)

	cout << endl<<"AES with 10 rounds and 16 bytes ciphertext"<<endl;
	cout << "Mode of Operation = CTR"<<endl;
	// create a dummy test cipher key
	unsigned char key[CipherKeyLenghth_max];
	cout << "key = ";
	for (unsigned short i = 0; i < CipherKeyLenghth; i++) {
		key[i] = (unsigned char) i;
		printf("0x0%X ", key[i]);
	}
	cout << endl << endl;

	// extend key
	unsigned char expandedKey[ExtdCipherKeyLenghth_max];
	KeyExpansion(key, Nk, expandedKey);
	cout << "expandedKey = ";
	for (unsigned short i = 0; i < ExtdCipherKeyLenghth; i++) {
		printf("0x%X ", expandedKey[i]);
	}
	cout << endl << endl;

	// create a test input data (plaintext) (ABCDEFGHIJKLMNOP)
	// unsigned char plaintext[32] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
	// 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P','Q','R','S','T','U','V','W','X','Y','Z','A','B','C','D','E','F' };
	unsigned char plaintext[32] ={0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50
			,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x41,0x42,0x43,0x44,0x45,0x46};
	


	// Create nonce
	unsigned char iv[16] = {0x92,0xe2,0xf3,0xd4,0xa5,0xb6,0x47,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	// unsigned char nonce[8] = {0x92,0xe2,0xf3,0xd4,0xa5,0xb6,0x47,0x48};
	// unsigned char counter[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	// iv = nonce+counter;
	
	// iv[15] = 0x01;
//	#pragma HLS array_partition variable=iv
	// encrypt
	unsigned char ciphertext[16];
//	#pragma HLS array_partition variable=ciphertext dim=0 complete
	unsigned int numberofBlocks = sizeof(plaintext)/(16*sizeof(char));
	unsigned char newState[16];
//	#pragma HLS array_partition variable=newState dim=0 complete

	// Encryption will run numberofBlocks times. Each block is 16 bytes each.
	for(unsigned int k =0;k<numberofBlocks;k++){
		for (unsigned short i = 0; i < 16; i++) { // Copying 16 blocks of message to an array
					newState[i] = plaintext[16*k+i];
		}

		cout << endl<<"Block ";
		printf("%d",k+1);
		cout<< endl;

		cout << "plaintext = ";
		for (unsigned short i = 0; i < 16; i++) {
			printf("%c ", newState[i]);
		}
		cout << " <=> ";
		for (unsigned short i = 0; i < 16; i++) {
			printf("%X ", newState[i]);
		}
		cout << endl << endl;

		iv[15] = iv[15]+k; // Increasing counter in Nonce by 1 for eachh block

		cout << "iv = ";
			for (unsigned short i = 0; i < 16; i++) {
				printf("%X ", iv[i]);
			}
		cout << endl << endl;

		AES_Encrypt(newState, expandedKey, Nr, ciphertext, iv);

		cout << "ciphertext = ";
		for (unsigned short i = 0; i < 16; i++) {
			printf("%X ", ciphertext[i]);
		}

		cout << endl;
	}
	return 0;
}
