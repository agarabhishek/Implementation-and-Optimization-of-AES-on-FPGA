// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AES_Encrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AES_Encrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AES_Encrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<23> AES_Encrypt::ap_ST_st1_fsm_0 = "1";
const sc_lv<23> AES_Encrypt::ap_ST_st2_fsm_1 = "10";
const sc_lv<23> AES_Encrypt::ap_ST_pp0_stg0_fsm_2 = "100";
const sc_lv<23> AES_Encrypt::ap_ST_st6_fsm_3 = "1000";
const sc_lv<23> AES_Encrypt::ap_ST_st7_fsm_4 = "10000";
const sc_lv<23> AES_Encrypt::ap_ST_st8_fsm_5 = "100000";
const sc_lv<23> AES_Encrypt::ap_ST_st9_fsm_6 = "1000000";
const sc_lv<23> AES_Encrypt::ap_ST_st10_fsm_7 = "10000000";
const sc_lv<23> AES_Encrypt::ap_ST_st11_fsm_8 = "100000000";
const sc_lv<23> AES_Encrypt::ap_ST_st12_fsm_9 = "1000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st13_fsm_10 = "10000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st14_fsm_11 = "100000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st15_fsm_12 = "1000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st16_fsm_13 = "10000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st17_fsm_14 = "100000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st18_fsm_15 = "1000000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st19_fsm_16 = "10000000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st20_fsm_17 = "100000000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st21_fsm_18 = "1000000000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st22_fsm_19 = "10000000000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st23_fsm_20 = "100000000000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_pp1_stg0_fsm_21 = "1000000000000000000000";
const sc_lv<23> AES_Encrypt::ap_ST_st27_fsm_22 = "10000000000000000000000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> AES_Encrypt::ap_const_lv1_1 = "1";
const int AES_Encrypt::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_2 = "10";
const sc_lv<1> AES_Encrypt::ap_const_lv1_0 = "0";
const sc_lv<32> AES_Encrypt::ap_const_lv32_4 = "100";
const sc_lv<32> AES_Encrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_15 = "10101";
const sc_lv<32> AES_Encrypt::ap_const_lv32_3 = "11";
const sc_lv<32> AES_Encrypt::ap_const_lv32_6 = "110";
const sc_lv<32> AES_Encrypt::ap_const_lv32_7 = "111";
const sc_lv<32> AES_Encrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> AES_Encrypt::ap_const_lv32_A = "1010";
const sc_lv<32> AES_Encrypt::ap_const_lv32_C = "1100";
const sc_lv<32> AES_Encrypt::ap_const_lv32_E = "1110";
const sc_lv<32> AES_Encrypt::ap_const_lv32_F = "1111";
const sc_lv<32> AES_Encrypt::ap_const_lv32_12 = "10010";
const sc_lv<32> AES_Encrypt::ap_const_lv32_13 = "10011";
const sc_lv<32> AES_Encrypt::ap_const_lv32_1 = "1";
const sc_lv<5> AES_Encrypt::ap_const_lv5_0 = "00000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_5 = "101";
const sc_lv<4> AES_Encrypt::ap_const_lv4_0 = "0000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_B = "1011";
const sc_lv<32> AES_Encrypt::ap_const_lv32_11 = "10001";
const sc_lv<32> AES_Encrypt::ap_const_lv32_14 = "10100";
const sc_lv<32> AES_Encrypt::ap_const_lv32_D = "1101";
const sc_lv<5> AES_Encrypt::ap_const_lv5_10 = "10000";
const sc_lv<5> AES_Encrypt::ap_const_lv5_1 = "1";
const sc_lv<4> AES_Encrypt::ap_const_lv4_A = "1010";
const sc_lv<4> AES_Encrypt::ap_const_lv4_1 = "1";
const sc_lv<4> AES_Encrypt::ap_const_lv4_9 = "1001";
const sc_lv<8> AES_Encrypt::ap_const_lv8_10 = "10000";
const sc_lv<32> AES_Encrypt::ap_const_lv32_16 = "10110";
const sc_lv<10> AES_Encrypt::ap_const_lv10_0 = "0000000000";
const sc_lv<8> AES_Encrypt::ap_const_lv8_0 = "00000000";

AES_Encrypt::AES_Encrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cipher_U = new AES_Encrypt_MixColumns_cipher("cipher_U");
    cipher_U->clk(ap_clk);
    cipher_U->reset(ap_rst_n_inv);
    cipher_U->address0(cipher_address0);
    cipher_U->ce0(cipher_ce0);
    cipher_U->q0(cipher_q0);
    cipher_U->address1(ap_var_for_const0);
    cipher_U->ce1(ap_var_for_const1);
    cipher_U->q1(cipher_q1);
    cipher_U->address2(ap_var_for_const0);
    cipher_U->ce2(ap_var_for_const1);
    cipher_U->q2(cipher_q2);
    cipher_U->address3(ap_var_for_const0);
    cipher_U->ce3(ap_var_for_const1);
    cipher_U->q3(cipher_q3);
    AES_Encrypt_CRTLSc_s_axi_U = new AES_Encrypt_CRTLSc_s_axi<C_S_AXI_CRTLSC_ADDR_WIDTH,C_S_AXI_CRTLSC_DATA_WIDTH>("AES_Encrypt_CRTLSc_s_axi_U");
    AES_Encrypt_CRTLSc_s_axi_U->AWVALID(s_axi_CRTLSc_AWVALID);
    AES_Encrypt_CRTLSc_s_axi_U->AWREADY(s_axi_CRTLSc_AWREADY);
    AES_Encrypt_CRTLSc_s_axi_U->AWADDR(s_axi_CRTLSc_AWADDR);
    AES_Encrypt_CRTLSc_s_axi_U->WVALID(s_axi_CRTLSc_WVALID);
    AES_Encrypt_CRTLSc_s_axi_U->WREADY(s_axi_CRTLSc_WREADY);
    AES_Encrypt_CRTLSc_s_axi_U->WDATA(s_axi_CRTLSc_WDATA);
    AES_Encrypt_CRTLSc_s_axi_U->WSTRB(s_axi_CRTLSc_WSTRB);
    AES_Encrypt_CRTLSc_s_axi_U->ARVALID(s_axi_CRTLSc_ARVALID);
    AES_Encrypt_CRTLSc_s_axi_U->ARREADY(s_axi_CRTLSc_ARREADY);
    AES_Encrypt_CRTLSc_s_axi_U->ARADDR(s_axi_CRTLSc_ARADDR);
    AES_Encrypt_CRTLSc_s_axi_U->RVALID(s_axi_CRTLSc_RVALID);
    AES_Encrypt_CRTLSc_s_axi_U->RREADY(s_axi_CRTLSc_RREADY);
    AES_Encrypt_CRTLSc_s_axi_U->RDATA(s_axi_CRTLSc_RDATA);
    AES_Encrypt_CRTLSc_s_axi_U->RRESP(s_axi_CRTLSc_RRESP);
    AES_Encrypt_CRTLSc_s_axi_U->BVALID(s_axi_CRTLSc_BVALID);
    AES_Encrypt_CRTLSc_s_axi_U->BREADY(s_axi_CRTLSc_BREADY);
    AES_Encrypt_CRTLSc_s_axi_U->BRESP(s_axi_CRTLSc_BRESP);
    AES_Encrypt_CRTLSc_s_axi_U->ACLK(ap_clk);
    AES_Encrypt_CRTLSc_s_axi_U->ARESET(ap_rst_n_inv);
    AES_Encrypt_CRTLSc_s_axi_U->ACLK_EN(ap_var_for_const2);
    AES_Encrypt_CRTLSc_s_axi_U->ap_start(ap_start);
    AES_Encrypt_CRTLSc_s_axi_U->interrupt(interrupt);
    AES_Encrypt_CRTLSc_s_axi_U->ap_ready(ap_ready);
    AES_Encrypt_CRTLSc_s_axi_U->ap_done(ap_done);
    AES_Encrypt_CRTLSc_s_axi_U->ap_idle(ap_idle);
    AES_Encrypt_CRTLSc_s_axi_U->newState_address0(newState_address0);
    AES_Encrypt_CRTLSc_s_axi_U->newState_ce0(newState_ce0);
    AES_Encrypt_CRTLSc_s_axi_U->newState_q0(newState_q0);
    AES_Encrypt_CRTLSc_s_axi_U->expandedKey_address0(expandedKey_address0);
    AES_Encrypt_CRTLSc_s_axi_U->expandedKey_ce0(expandedKey_ce0);
    AES_Encrypt_CRTLSc_s_axi_U->expandedKey_q0(expandedKey_q0);
    AES_Encrypt_CRTLSc_s_axi_U->Nr(Nr);
    state_U = new AES_Encrypt_state("state_U");
    state_U->clk(ap_clk);
    state_U->reset(ap_rst_n_inv);
    state_U->address0(state_address0);
    state_U->ce0(state_ce0);
    state_U->we0(state_we0);
    state_U->d0(state_d0);
    state_U->q0(state_q0);
    state_U->address1(state_address1);
    state_U->ce1(state_ce1);
    state_U->q1(state_q1);
    grp_AES_Encrypt_MixColumns_fu_294 = new AES_Encrypt_MixColumns("grp_AES_Encrypt_MixColumns_fu_294");
    grp_AES_Encrypt_MixColumns_fu_294->ap_clk(ap_clk);
    grp_AES_Encrypt_MixColumns_fu_294->ap_rst(ap_rst_n_inv);
    grp_AES_Encrypt_MixColumns_fu_294->ap_start(grp_AES_Encrypt_MixColumns_fu_294_ap_start);
    grp_AES_Encrypt_MixColumns_fu_294->ap_done(grp_AES_Encrypt_MixColumns_fu_294_ap_done);
    grp_AES_Encrypt_MixColumns_fu_294->ap_idle(grp_AES_Encrypt_MixColumns_fu_294_ap_idle);
    grp_AES_Encrypt_MixColumns_fu_294->ap_ready(grp_AES_Encrypt_MixColumns_fu_294_ap_ready);
    grp_AES_Encrypt_MixColumns_fu_294->state_address0(grp_AES_Encrypt_MixColumns_fu_294_state_address0);
    grp_AES_Encrypt_MixColumns_fu_294->state_ce0(grp_AES_Encrypt_MixColumns_fu_294_state_ce0);
    grp_AES_Encrypt_MixColumns_fu_294->state_we0(grp_AES_Encrypt_MixColumns_fu_294_state_we0);
    grp_AES_Encrypt_MixColumns_fu_294->state_d0(grp_AES_Encrypt_MixColumns_fu_294_state_d0);
    grp_AES_Encrypt_MixColumns_fu_294->state_q0(state_q0);
    grp_AES_Encrypt_MixColumns_fu_294->state_address1(grp_AES_Encrypt_MixColumns_fu_294_state_address1);
    grp_AES_Encrypt_MixColumns_fu_294->state_ce1(grp_AES_Encrypt_MixColumns_fu_294_state_ce1);
    grp_AES_Encrypt_MixColumns_fu_294->state_q1(state_q1);
    grp_AES_Encrypt_ShiftRows_fu_301 = new AES_Encrypt_ShiftRows("grp_AES_Encrypt_ShiftRows_fu_301");
    grp_AES_Encrypt_ShiftRows_fu_301->ap_clk(ap_clk);
    grp_AES_Encrypt_ShiftRows_fu_301->ap_rst(ap_rst_n_inv);
    grp_AES_Encrypt_ShiftRows_fu_301->ap_start(grp_AES_Encrypt_ShiftRows_fu_301_ap_start);
    grp_AES_Encrypt_ShiftRows_fu_301->ap_done(grp_AES_Encrypt_ShiftRows_fu_301_ap_done);
    grp_AES_Encrypt_ShiftRows_fu_301->ap_idle(grp_AES_Encrypt_ShiftRows_fu_301_ap_idle);
    grp_AES_Encrypt_ShiftRows_fu_301->ap_ready(grp_AES_Encrypt_ShiftRows_fu_301_ap_ready);
    grp_AES_Encrypt_ShiftRows_fu_301->state_address0(grp_AES_Encrypt_ShiftRows_fu_301_state_address0);
    grp_AES_Encrypt_ShiftRows_fu_301->state_ce0(grp_AES_Encrypt_ShiftRows_fu_301_state_ce0);
    grp_AES_Encrypt_ShiftRows_fu_301->state_we0(grp_AES_Encrypt_ShiftRows_fu_301_state_we0);
    grp_AES_Encrypt_ShiftRows_fu_301->state_d0(grp_AES_Encrypt_ShiftRows_fu_301_state_d0);
    grp_AES_Encrypt_ShiftRows_fu_301->state_q0(state_q0);
    grp_AES_Encrypt_ShiftRows_fu_301->state_address1(grp_AES_Encrypt_ShiftRows_fu_301_state_address1);
    grp_AES_Encrypt_ShiftRows_fu_301->state_ce1(grp_AES_Encrypt_ShiftRows_fu_301_state_ce1);
    grp_AES_Encrypt_ShiftRows_fu_301->state_q1(state_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st27_fsm_22 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st27_fsm_22 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_147);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_156);
    sensitive << ( iv_rsp_empty_n );
    sensitive << ( exitcond1_reg_489 );

    SC_METHOD(thread_ap_sig_173);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_180);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_190);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_197);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_209);
    sensitive << ( ciphertext_req_full_n );
    sensitive << ( ap_reg_ppstg_exitcond8_reg_603_pp1_iter1 );

    SC_METHOD(thread_ap_sig_233);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_249);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_258);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_272);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_280);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_289);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_302);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_317);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_333);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_350);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_372);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_435);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_455);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_464);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_473);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_486);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_638);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_2);
    sensitive << ( ap_sig_147 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp1_stg0_fsm_21);
    sensitive << ( ap_sig_197 );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_7);
    sensitive << ( ap_sig_258 );

    SC_METHOD(thread_ap_sig_cseq_ST_st11_fsm_8);
    sensitive << ( ap_sig_190 );

    SC_METHOD(thread_ap_sig_cseq_ST_st12_fsm_9);
    sensitive << ( ap_sig_272 );

    SC_METHOD(thread_ap_sig_cseq_ST_st13_fsm_10);
    sensitive << ( ap_sig_280 );

    SC_METHOD(thread_ap_sig_cseq_ST_st14_fsm_11);
    sensitive << ( ap_sig_455 );

    SC_METHOD(thread_ap_sig_cseq_ST_st15_fsm_12);
    sensitive << ( ap_sig_289 );

    SC_METHOD(thread_ap_sig_cseq_ST_st16_fsm_13);
    sensitive << ( ap_sig_486 );

    SC_METHOD(thread_ap_sig_cseq_ST_st17_fsm_14);
    sensitive << ( ap_sig_302 );

    SC_METHOD(thread_ap_sig_cseq_ST_st18_fsm_15);
    sensitive << ( ap_sig_317 );

    SC_METHOD(thread_ap_sig_cseq_ST_st19_fsm_16);
    sensitive << ( ap_sig_180 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_40 );

    SC_METHOD(thread_ap_sig_cseq_ST_st20_fsm_17);
    sensitive << ( ap_sig_464 );

    SC_METHOD(thread_ap_sig_cseq_ST_st21_fsm_18);
    sensitive << ( ap_sig_333 );

    SC_METHOD(thread_ap_sig_cseq_ST_st22_fsm_19);
    sensitive << ( ap_sig_350 );

    SC_METHOD(thread_ap_sig_cseq_ST_st23_fsm_20);
    sensitive << ( ap_sig_473 );

    SC_METHOD(thread_ap_sig_cseq_ST_st27_fsm_22);
    sensitive << ( ap_sig_638 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_372 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_3);
    sensitive << ( ap_sig_233 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_4);
    sensitive << ( ap_sig_173 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_5);
    sensitive << ( ap_sig_435 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_6);
    sensitive << ( ap_sig_249 );

    SC_METHOD(thread_cipher_address0);
    sensitive << ( ap_sig_cseq_ST_st12_fsm_9 );
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_14 );
    sensitive << ( tmp_1_i_fu_386_p1 );

    SC_METHOD(thread_cipher_ce0);
    sensitive << ( ap_sig_cseq_ST_st12_fsm_9 );
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_14 );

    SC_METHOD(thread_ciphertext_address);
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_reg_ppstg_is_0iter_reg_617_pp1_iter1 );

    SC_METHOD(thread_ciphertext_dataout);
    sensitive << ( reg_317 );
    sensitive << ( ap_reg_ppstg_exitcond8_reg_603_pp1_iter1 );
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );

    SC_METHOD(thread_ciphertext_req_din);
    sensitive << ( ap_reg_ppstg_exitcond8_reg_603_pp1_iter1 );
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_reg_ppstg_is_0iter_reg_617_pp1_iter1 );

    SC_METHOD(thread_ciphertext_req_write);
    sensitive << ( ap_reg_ppstg_exitcond8_reg_603_pp1_iter1 );
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_reg_ppstg_is_0iter_reg_617_pp1_iter1 );

    SC_METHOD(thread_ciphertext_rsp_read);

    SC_METHOD(thread_ciphertext_size);
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_reg_ppstg_is_0iter_reg_617_pp1_iter1 );

    SC_METHOD(thread_exitcond1_fu_322_p2);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_156 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indvar_phi_fu_219_p4 );

    SC_METHOD(thread_exitcond8_fu_466_p2);
    sensitive << ( indvar6_reg_283 );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_21 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );

    SC_METHOD(thread_exitcond_fu_357_p2);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );
    sensitive << ( i4_reg_238 );

    SC_METHOD(thread_exitcond_i1_fu_339_p2);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_3 );
    sensitive << ( i_0_i1_reg_227 );

    SC_METHOD(thread_exitcond_i2_fu_411_p2);
    sensitive << ( ap_sig_cseq_ST_st18_fsm_15 );
    sensitive << ( i_0_i2_reg_261 );

    SC_METHOD(thread_exitcond_i3_fu_369_p2);
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( i_i_reg_250 );

    SC_METHOD(thread_exitcond_i_fu_442_p2);
    sensitive << ( ap_sig_cseq_ST_st21_fsm_18 );
    sensitive << ( i_0_i_reg_272 );

    SC_METHOD(thread_expandedKey_address0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st18_fsm_15 );
    sensitive << ( tmp_17_fu_351_p1 );
    sensitive << ( sum5_cast_fu_437_p1 );

    SC_METHOD(thread_expandedKey_ce0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st18_fsm_15 );

    SC_METHOD(thread_grp_AES_Encrypt_MixColumns_fu_294_ap_start);
    sensitive << ( ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start );

    SC_METHOD(thread_grp_AES_Encrypt_ShiftRows_fu_301_ap_start);
    sensitive << ( ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start );

    SC_METHOD(thread_grp_fu_306_p2);
    sensitive << ( expandedKey_q0 );
    sensitive << ( state_q0 );

    SC_METHOD(thread_i_3_fu_448_p2);
    sensitive << ( i_0_i_reg_272 );

    SC_METHOD(thread_i_4_fu_375_p2);
    sensitive << ( i_i_reg_250 );

    SC_METHOD(thread_i_5_fu_363_p2);
    sensitive << ( i4_reg_238 );

    SC_METHOD(thread_i_6_fu_417_p2);
    sensitive << ( i_0_i2_reg_261 );

    SC_METHOD(thread_i_fu_345_p2);
    sensitive << ( i_0_i1_reg_227 );

    SC_METHOD(thread_indvar_next7_fu_472_p2);
    sensitive << ( indvar6_reg_283 );

    SC_METHOD(thread_indvar_next_fu_328_p2);
    sensitive << ( indvar_phi_fu_219_p4 );

    SC_METHOD(thread_indvar_phi_fu_219_p4);
    sensitive << ( indvar_reg_215 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_2 );
    sensitive << ( exitcond1_reg_489 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indvar_next_reg_493 );

    SC_METHOD(thread_is_0iter_fu_483_p2);
    sensitive << ( indvar6_reg_283 );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_21 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( exitcond8_fu_466_p2 );

    SC_METHOD(thread_iv_address);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_iv_dataout);

    SC_METHOD(thread_iv_req_din);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_iv_req_write);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_iv_rsp_read);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_2 );
    sensitive << ( exitcond1_reg_489 );
    sensitive << ( ap_sig_156 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_iv_size);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_newState_address0);
    sensitive << ( ap_sig_cseq_ST_st21_fsm_18 );
    sensitive << ( tmp_19_fu_454_p1 );

    SC_METHOD(thread_newState_ce0);
    sensitive << ( ap_sig_cseq_ST_st21_fsm_18 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_21 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_3 );
    sensitive << ( state_addr_31_reg_516 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( state_addr_34_reg_537 );
    sensitive << ( exitcond_i3_fu_369_p2 );
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( ap_sig_cseq_ST_st15_fsm_12 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_14 );
    sensitive << ( ap_sig_cseq_ST_st18_fsm_15 );
    sensitive << ( state_addr_36_reg_574 );
    sensitive << ( ap_sig_cseq_ST_st21_fsm_18 );
    sensitive << ( state_addr_33_reg_593 );
    sensitive << ( grp_AES_Encrypt_MixColumns_fu_294_state_address0 );
    sensitive << ( grp_AES_Encrypt_ShiftRows_fu_301_state_address0 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st14_fsm_11 );
    sensitive << ( ap_sig_cseq_ST_st20_fsm_17 );
    sensitive << ( ap_sig_cseq_ST_st23_fsm_20 );
    sensitive << ( tmp_s_fu_334_p1 );
    sensitive << ( tmp_17_fu_351_p1 );
    sensitive << ( tmp_i_fu_381_p1 );
    sensitive << ( tmp_25_fu_423_p1 );
    sensitive << ( tmp_19_fu_454_p1 );
    sensitive << ( tmp_22_fu_478_p1 );

    SC_METHOD(thread_state_address1);
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( ap_sig_cseq_ST_st15_fsm_12 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_14 );
    sensitive << ( grp_AES_Encrypt_MixColumns_fu_294_state_address1 );
    sensitive << ( grp_AES_Encrypt_ShiftRows_fu_301_state_address1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_sig_156 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_21 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_7 );
    sensitive << ( exitcond_i3_fu_369_p2 );
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( ap_sig_cseq_ST_st15_fsm_12 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_14 );
    sensitive << ( ap_sig_cseq_ST_st18_fsm_15 );
    sensitive << ( ap_sig_cseq_ST_st21_fsm_18 );
    sensitive << ( grp_AES_Encrypt_MixColumns_fu_294_state_ce0 );
    sensitive << ( grp_AES_Encrypt_ShiftRows_fu_301_state_ce0 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st14_fsm_11 );
    sensitive << ( ap_sig_cseq_ST_st20_fsm_17 );
    sensitive << ( ap_sig_cseq_ST_st23_fsm_20 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( ap_sig_cseq_ST_st15_fsm_12 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_14 );
    sensitive << ( grp_AES_Encrypt_MixColumns_fu_294_state_ce1 );
    sensitive << ( grp_AES_Encrypt_ShiftRows_fu_301_state_ce1 );

    SC_METHOD(thread_state_d0);
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( reg_312 );
    sensitive << ( iv_read_reg_498 );
    sensitive << ( cipher_load_reg_547 );
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( ap_sig_cseq_ST_st15_fsm_12 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_14 );
    sensitive << ( tmp_20_reg_598 );
    sensitive << ( grp_AES_Encrypt_MixColumns_fu_294_state_d0 );
    sensitive << ( grp_AES_Encrypt_ShiftRows_fu_301_state_d0 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st14_fsm_11 );
    sensitive << ( ap_sig_cseq_ST_st20_fsm_17 );
    sensitive << ( ap_sig_cseq_ST_st23_fsm_20 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_sig_156 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppstg_exitcond1_reg_489_pp0_iter1 );
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( ap_sig_cseq_ST_st15_fsm_12 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_14 );
    sensitive << ( grp_AES_Encrypt_MixColumns_fu_294_state_we0 );
    sensitive << ( grp_AES_Encrypt_ShiftRows_fu_301_state_we0 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st14_fsm_11 );
    sensitive << ( ap_sig_cseq_ST_st20_fsm_17 );
    sensitive << ( ap_sig_cseq_ST_st23_fsm_20 );

    SC_METHOD(thread_sum5_cast_fu_437_p1);
    sensitive << ( sum5_fu_432_p2 );

    SC_METHOD(thread_sum5_fu_432_p2);
    sensitive << ( tmp_24_reg_556 );
    sensitive << ( tmp_74_cast_fu_428_p1 );

    SC_METHOD(thread_tmp_17_fu_351_p1);
    sensitive << ( i_0_i1_reg_227 );

    SC_METHOD(thread_tmp_19_fu_454_p1);
    sensitive << ( i_0_i_reg_272 );

    SC_METHOD(thread_tmp_1_i_fu_386_p1);
    sensitive << ( reg_317 );

    SC_METHOD(thread_tmp_20_fu_460_p2);
    sensitive << ( newState_q0 );
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_21_fu_391_p2);
    sensitive << ( ap_sig_cseq_ST_st15_fsm_12 );
    sensitive << ( grp_AES_Encrypt_ShiftRows_fu_301_ap_done );
    sensitive << ( i4_reg_238 );

    SC_METHOD(thread_tmp_22_fu_478_p1);
    sensitive << ( indvar6_reg_283 );

    SC_METHOD(thread_tmp_23_fu_397_p3);
    sensitive << ( i4_reg_238 );

    SC_METHOD(thread_tmp_24_fu_405_p2);
    sensitive << ( tmp_23_fu_397_p3 );

    SC_METHOD(thread_tmp_25_fu_423_p1);
    sensitive << ( i_0_i2_reg_261 );

    SC_METHOD(thread_tmp_74_cast_fu_428_p1);
    sensitive << ( i_0_i2_reg_261 );

    SC_METHOD(thread_tmp_i_fu_381_p1);
    sensitive << ( i_i_reg_250 );

    SC_METHOD(thread_tmp_s_fu_334_p1);
    sensitive << ( ap_reg_ppstg_indvar_reg_215_pp0_iter1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_156 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_sig_209 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( exitcond1_fu_322_p2 );
    sensitive << ( exitcond_i1_fu_339_p2 );
    sensitive << ( exitcond_i3_fu_369_p2 );
    sensitive << ( tmp_21_fu_391_p2 );
    sensitive << ( tmp_21_reg_552 );
    sensitive << ( grp_AES_Encrypt_ShiftRows_fu_301_ap_done );
    sensitive << ( grp_AES_Encrypt_MixColumns_fu_294_ap_done );
    sensitive << ( exitcond_i2_fu_411_p2 );
    sensitive << ( exitcond_i_fu_442_p2 );
    sensitive << ( exitcond8_fu_466_p2 );
    sensitive << ( exitcond_fu_357_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it2 = SC_LOGIC_0;
    ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start = SC_LOGIC_0;
    ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AES_Encrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ciphertext_req_din, "(port)ciphertext_req_din");
    sc_trace(mVcdFile, ciphertext_req_full_n, "(port)ciphertext_req_full_n");
    sc_trace(mVcdFile, ciphertext_req_write, "(port)ciphertext_req_write");
    sc_trace(mVcdFile, ciphertext_rsp_empty_n, "(port)ciphertext_rsp_empty_n");
    sc_trace(mVcdFile, ciphertext_rsp_read, "(port)ciphertext_rsp_read");
    sc_trace(mVcdFile, ciphertext_address, "(port)ciphertext_address");
    sc_trace(mVcdFile, ciphertext_datain, "(port)ciphertext_datain");
    sc_trace(mVcdFile, ciphertext_dataout, "(port)ciphertext_dataout");
    sc_trace(mVcdFile, ciphertext_size, "(port)ciphertext_size");
    sc_trace(mVcdFile, iv_req_din, "(port)iv_req_din");
    sc_trace(mVcdFile, iv_req_full_n, "(port)iv_req_full_n");
    sc_trace(mVcdFile, iv_req_write, "(port)iv_req_write");
    sc_trace(mVcdFile, iv_rsp_empty_n, "(port)iv_rsp_empty_n");
    sc_trace(mVcdFile, iv_rsp_read, "(port)iv_rsp_read");
    sc_trace(mVcdFile, iv_address, "(port)iv_address");
    sc_trace(mVcdFile, iv_datain, "(port)iv_datain");
    sc_trace(mVcdFile, iv_dataout, "(port)iv_dataout");
    sc_trace(mVcdFile, iv_size, "(port)iv_size");
    sc_trace(mVcdFile, s_axi_CRTLSc_AWVALID, "(port)s_axi_CRTLSc_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTLSc_AWREADY, "(port)s_axi_CRTLSc_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTLSc_AWADDR, "(port)s_axi_CRTLSc_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTLSc_WVALID, "(port)s_axi_CRTLSc_WVALID");
    sc_trace(mVcdFile, s_axi_CRTLSc_WREADY, "(port)s_axi_CRTLSc_WREADY");
    sc_trace(mVcdFile, s_axi_CRTLSc_WDATA, "(port)s_axi_CRTLSc_WDATA");
    sc_trace(mVcdFile, s_axi_CRTLSc_WSTRB, "(port)s_axi_CRTLSc_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTLSc_ARVALID, "(port)s_axi_CRTLSc_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTLSc_ARREADY, "(port)s_axi_CRTLSc_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTLSc_ARADDR, "(port)s_axi_CRTLSc_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTLSc_RVALID, "(port)s_axi_CRTLSc_RVALID");
    sc_trace(mVcdFile, s_axi_CRTLSc_RREADY, "(port)s_axi_CRTLSc_RREADY");
    sc_trace(mVcdFile, s_axi_CRTLSc_RDATA, "(port)s_axi_CRTLSc_RDATA");
    sc_trace(mVcdFile, s_axi_CRTLSc_RRESP, "(port)s_axi_CRTLSc_RRESP");
    sc_trace(mVcdFile, s_axi_CRTLSc_BVALID, "(port)s_axi_CRTLSc_BVALID");
    sc_trace(mVcdFile, s_axi_CRTLSc_BREADY, "(port)s_axi_CRTLSc_BREADY");
    sc_trace(mVcdFile, s_axi_CRTLSc_BRESP, "(port)s_axi_CRTLSc_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_40, "ap_sig_40");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, newState_address0, "newState_address0");
    sc_trace(mVcdFile, newState_ce0, "newState_ce0");
    sc_trace(mVcdFile, newState_q0, "newState_q0");
    sc_trace(mVcdFile, expandedKey_address0, "expandedKey_address0");
    sc_trace(mVcdFile, expandedKey_ce0, "expandedKey_ce0");
    sc_trace(mVcdFile, expandedKey_q0, "expandedKey_q0");
    sc_trace(mVcdFile, Nr, "Nr");
    sc_trace(mVcdFile, cipher_address0, "cipher_address0");
    sc_trace(mVcdFile, cipher_ce0, "cipher_ce0");
    sc_trace(mVcdFile, cipher_q0, "cipher_q0");
    sc_trace(mVcdFile, cipher_q1, "cipher_q1");
    sc_trace(mVcdFile, cipher_q2, "cipher_q2");
    sc_trace(mVcdFile, cipher_q3, "cipher_q3");
    sc_trace(mVcdFile, indvar_reg_215, "indvar_reg_215");
    sc_trace(mVcdFile, ap_reg_ppstg_indvar_reg_215_pp0_iter1, "ap_reg_ppstg_indvar_reg_215_pp0_iter1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_2, "ap_sig_cseq_ST_pp0_stg0_fsm_2");
    sc_trace(mVcdFile, ap_sig_147, "ap_sig_147");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, exitcond1_reg_489, "exitcond1_reg_489");
    sc_trace(mVcdFile, ap_sig_156, "ap_sig_156");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, indvar6_reg_283, "indvar6_reg_283");
    sc_trace(mVcdFile, grp_fu_306_p2, "grp_fu_306_p2");
    sc_trace(mVcdFile, reg_312, "reg_312");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_4, "ap_sig_cseq_ST_st7_fsm_4");
    sc_trace(mVcdFile, ap_sig_173, "ap_sig_173");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st19_fsm_16, "ap_sig_cseq_ST_st19_fsm_16");
    sc_trace(mVcdFile, ap_sig_180, "ap_sig_180");
    sc_trace(mVcdFile, state_q0, "state_q0");
    sc_trace(mVcdFile, reg_317, "reg_317");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st11_fsm_8, "ap_sig_cseq_ST_st11_fsm_8");
    sc_trace(mVcdFile, ap_sig_190, "ap_sig_190");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp1_stg0_fsm_21, "ap_sig_cseq_ST_pp1_stg0_fsm_21");
    sc_trace(mVcdFile, ap_sig_197, "ap_sig_197");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it1, "ap_reg_ppiten_pp1_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it0, "ap_reg_ppiten_pp1_it0");
    sc_trace(mVcdFile, exitcond8_reg_603, "exitcond8_reg_603");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond8_reg_603_pp1_iter1, "ap_reg_ppstg_exitcond8_reg_603_pp1_iter1");
    sc_trace(mVcdFile, ap_sig_209, "ap_sig_209");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it2, "ap_reg_ppiten_pp1_it2");
    sc_trace(mVcdFile, exitcond1_fu_322_p2, "exitcond1_fu_322_p2");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond1_reg_489_pp0_iter1, "ap_reg_ppstg_exitcond1_reg_489_pp0_iter1");
    sc_trace(mVcdFile, indvar_next_fu_328_p2, "indvar_next_fu_328_p2");
    sc_trace(mVcdFile, indvar_next_reg_493, "indvar_next_reg_493");
    sc_trace(mVcdFile, iv_read_reg_498, "iv_read_reg_498");
    sc_trace(mVcdFile, i_fu_345_p2, "i_fu_345_p2");
    sc_trace(mVcdFile, i_reg_506, "i_reg_506");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_3, "ap_sig_cseq_ST_st6_fsm_3");
    sc_trace(mVcdFile, ap_sig_233, "ap_sig_233");
    sc_trace(mVcdFile, exitcond_i1_fu_339_p2, "exitcond_i1_fu_339_p2");
    sc_trace(mVcdFile, state_addr_31_reg_516, "state_addr_31_reg_516");
    sc_trace(mVcdFile, i_5_fu_363_p2, "i_5_fu_363_p2");
    sc_trace(mVcdFile, i_5_reg_524, "i_5_reg_524");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_6, "ap_sig_cseq_ST_st9_fsm_6");
    sc_trace(mVcdFile, ap_sig_249, "ap_sig_249");
    sc_trace(mVcdFile, i_4_fu_375_p2, "i_4_fu_375_p2");
    sc_trace(mVcdFile, i_4_reg_532, "i_4_reg_532");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_7, "ap_sig_cseq_ST_st10_fsm_7");
    sc_trace(mVcdFile, ap_sig_258, "ap_sig_258");
    sc_trace(mVcdFile, state_addr_34_reg_537, "state_addr_34_reg_537");
    sc_trace(mVcdFile, exitcond_i3_fu_369_p2, "exitcond_i3_fu_369_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st12_fsm_9, "ap_sig_cseq_ST_st12_fsm_9");
    sc_trace(mVcdFile, ap_sig_272, "ap_sig_272");
    sc_trace(mVcdFile, cipher_load_reg_547, "cipher_load_reg_547");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st13_fsm_10, "ap_sig_cseq_ST_st13_fsm_10");
    sc_trace(mVcdFile, ap_sig_280, "ap_sig_280");
    sc_trace(mVcdFile, tmp_21_fu_391_p2, "tmp_21_fu_391_p2");
    sc_trace(mVcdFile, tmp_21_reg_552, "tmp_21_reg_552");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st15_fsm_12, "ap_sig_cseq_ST_st15_fsm_12");
    sc_trace(mVcdFile, ap_sig_289, "ap_sig_289");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_ap_done, "grp_AES_Encrypt_ShiftRows_fu_301_ap_done");
    sc_trace(mVcdFile, tmp_24_fu_405_p2, "tmp_24_fu_405_p2");
    sc_trace(mVcdFile, tmp_24_reg_556, "tmp_24_reg_556");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st17_fsm_14, "ap_sig_cseq_ST_st17_fsm_14");
    sc_trace(mVcdFile, ap_sig_302, "ap_sig_302");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_ap_done, "grp_AES_Encrypt_MixColumns_fu_294_ap_done");
    sc_trace(mVcdFile, i_6_fu_417_p2, "i_6_fu_417_p2");
    sc_trace(mVcdFile, i_6_reg_564, "i_6_reg_564");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st18_fsm_15, "ap_sig_cseq_ST_st18_fsm_15");
    sc_trace(mVcdFile, ap_sig_317, "ap_sig_317");
    sc_trace(mVcdFile, exitcond_i2_fu_411_p2, "exitcond_i2_fu_411_p2");
    sc_trace(mVcdFile, state_addr_36_reg_574, "state_addr_36_reg_574");
    sc_trace(mVcdFile, exitcond_i_fu_442_p2, "exitcond_i_fu_442_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st21_fsm_18, "ap_sig_cseq_ST_st21_fsm_18");
    sc_trace(mVcdFile, ap_sig_333, "ap_sig_333");
    sc_trace(mVcdFile, i_3_fu_448_p2, "i_3_fu_448_p2");
    sc_trace(mVcdFile, i_3_reg_583, "i_3_reg_583");
    sc_trace(mVcdFile, state_addr_33_reg_593, "state_addr_33_reg_593");
    sc_trace(mVcdFile, tmp_20_fu_460_p2, "tmp_20_fu_460_p2");
    sc_trace(mVcdFile, tmp_20_reg_598, "tmp_20_reg_598");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st22_fsm_19, "ap_sig_cseq_ST_st22_fsm_19");
    sc_trace(mVcdFile, ap_sig_350, "ap_sig_350");
    sc_trace(mVcdFile, exitcond8_fu_466_p2, "exitcond8_fu_466_p2");
    sc_trace(mVcdFile, indvar_next7_fu_472_p2, "indvar_next7_fu_472_p2");
    sc_trace(mVcdFile, is_0iter_fu_483_p2, "is_0iter_fu_483_p2");
    sc_trace(mVcdFile, is_0iter_reg_617, "is_0iter_reg_617");
    sc_trace(mVcdFile, ap_reg_ppstg_is_0iter_reg_617_pp1_iter1, "ap_reg_ppstg_is_0iter_reg_617_pp1_iter1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_372, "ap_sig_372");
    sc_trace(mVcdFile, state_address0, "state_address0");
    sc_trace(mVcdFile, state_ce0, "state_ce0");
    sc_trace(mVcdFile, state_we0, "state_we0");
    sc_trace(mVcdFile, state_d0, "state_d0");
    sc_trace(mVcdFile, state_address1, "state_address1");
    sc_trace(mVcdFile, state_ce1, "state_ce1");
    sc_trace(mVcdFile, state_q1, "state_q1");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_ap_start, "grp_AES_Encrypt_MixColumns_fu_294_ap_start");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_ap_idle, "grp_AES_Encrypt_MixColumns_fu_294_ap_idle");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_ap_ready, "grp_AES_Encrypt_MixColumns_fu_294_ap_ready");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_state_address0, "grp_AES_Encrypt_MixColumns_fu_294_state_address0");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_state_ce0, "grp_AES_Encrypt_MixColumns_fu_294_state_ce0");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_state_we0, "grp_AES_Encrypt_MixColumns_fu_294_state_we0");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_state_d0, "grp_AES_Encrypt_MixColumns_fu_294_state_d0");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_state_address1, "grp_AES_Encrypt_MixColumns_fu_294_state_address1");
    sc_trace(mVcdFile, grp_AES_Encrypt_MixColumns_fu_294_state_ce1, "grp_AES_Encrypt_MixColumns_fu_294_state_ce1");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_ap_start, "grp_AES_Encrypt_ShiftRows_fu_301_ap_start");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_ap_idle, "grp_AES_Encrypt_ShiftRows_fu_301_ap_idle");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_ap_ready, "grp_AES_Encrypt_ShiftRows_fu_301_ap_ready");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_state_address0, "grp_AES_Encrypt_ShiftRows_fu_301_state_address0");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_state_ce0, "grp_AES_Encrypt_ShiftRows_fu_301_state_ce0");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_state_we0, "grp_AES_Encrypt_ShiftRows_fu_301_state_we0");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_state_d0, "grp_AES_Encrypt_ShiftRows_fu_301_state_d0");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_state_address1, "grp_AES_Encrypt_ShiftRows_fu_301_state_address1");
    sc_trace(mVcdFile, grp_AES_Encrypt_ShiftRows_fu_301_state_ce1, "grp_AES_Encrypt_ShiftRows_fu_301_state_ce1");
    sc_trace(mVcdFile, indvar_phi_fu_219_p4, "indvar_phi_fu_219_p4");
    sc_trace(mVcdFile, i_0_i1_reg_227, "i_0_i1_reg_227");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_5, "ap_sig_cseq_ST_st8_fsm_5");
    sc_trace(mVcdFile, ap_sig_435, "ap_sig_435");
    sc_trace(mVcdFile, i4_reg_238, "i4_reg_238");
    sc_trace(mVcdFile, i_i_reg_250, "i_i_reg_250");
    sc_trace(mVcdFile, exitcond_fu_357_p2, "exitcond_fu_357_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st14_fsm_11, "ap_sig_cseq_ST_st14_fsm_11");
    sc_trace(mVcdFile, ap_sig_455, "ap_sig_455");
    sc_trace(mVcdFile, i_0_i2_reg_261, "i_0_i2_reg_261");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st20_fsm_17, "ap_sig_cseq_ST_st20_fsm_17");
    sc_trace(mVcdFile, ap_sig_464, "ap_sig_464");
    sc_trace(mVcdFile, i_0_i_reg_272, "i_0_i_reg_272");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st23_fsm_20, "ap_sig_cseq_ST_st23_fsm_20");
    sc_trace(mVcdFile, ap_sig_473, "ap_sig_473");
    sc_trace(mVcdFile, ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start, "ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st16_fsm_13, "ap_sig_cseq_ST_st16_fsm_13");
    sc_trace(mVcdFile, ap_sig_486, "ap_sig_486");
    sc_trace(mVcdFile, ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start, "ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start");
    sc_trace(mVcdFile, tmp_s_fu_334_p1, "tmp_s_fu_334_p1");
    sc_trace(mVcdFile, tmp_17_fu_351_p1, "tmp_17_fu_351_p1");
    sc_trace(mVcdFile, tmp_i_fu_381_p1, "tmp_i_fu_381_p1");
    sc_trace(mVcdFile, tmp_1_i_fu_386_p1, "tmp_1_i_fu_386_p1");
    sc_trace(mVcdFile, sum5_cast_fu_437_p1, "sum5_cast_fu_437_p1");
    sc_trace(mVcdFile, tmp_25_fu_423_p1, "tmp_25_fu_423_p1");
    sc_trace(mVcdFile, tmp_19_fu_454_p1, "tmp_19_fu_454_p1");
    sc_trace(mVcdFile, tmp_22_fu_478_p1, "tmp_22_fu_478_p1");
    sc_trace(mVcdFile, tmp_23_fu_397_p3, "tmp_23_fu_397_p3");
    sc_trace(mVcdFile, tmp_74_cast_fu_428_p1, "tmp_74_cast_fu_428_p1");
    sc_trace(mVcdFile, sum5_fu_432_p2, "sum5_fu_432_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st27_fsm_22, "ap_sig_cseq_ST_st27_fsm_22");
    sc_trace(mVcdFile, ap_sig_638, "ap_sig_638");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("AES_Encrypt.hdltvin.dat");
    mHdltvoutHandle.open("AES_Encrypt.hdltvout.dat");
}

AES_Encrypt::~AES_Encrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cipher_U;
    delete AES_Encrypt_CRTLSc_s_axi_U;
    delete state_U;
    delete grp_AES_Encrypt_MixColumns_fu_294;
    delete grp_AES_Encrypt_ShiftRows_fu_301;
}

void AES_Encrypt::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void AES_Encrypt::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void AES_Encrypt::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv10_0;
}

void AES_Encrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_13.read())) {
            ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES_Encrypt_MixColumns_fu_294_ap_ready.read())) {
            ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i3_fu_369_p2.read()))) {
            ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES_Encrypt_ShiftRows_fu_301_ap_ready.read())) {
            ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && 
             !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_322_p2.read()))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && 
             !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_322_p2.read()))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && 
                     !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_322_p2.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if (!(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
            ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && 
             !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_466_p2.read()))) {
            ap_reg_ppiten_pp1_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_442_p2.read()))) {
            ap_reg_ppiten_pp1_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && 
             !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_466_p2.read()))) {
            ap_reg_ppiten_pp1_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_442_p2.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && 
                     !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_466_p2.read())))) {
            ap_reg_ppiten_pp1_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it2 = ap_const_logic_0;
    } else {
        if (!(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))) {
            ap_reg_ppiten_pp1_it2 = ap_reg_ppiten_pp1_it1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_442_p2.read()))) {
            ap_reg_ppiten_pp1_it2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i1_fu_339_p2.read()))) {
        i4_reg_238 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_15.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i2_fu_411_p2.read()))) {
        i4_reg_238 = i_5_reg_524.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_322_p2.read()))) {
        i_0_i1_reg_227 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_5.read())) {
        i_0_i1_reg_227 = i_reg_506.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_17.read())) {
        i_0_i2_reg_261 = i_6_reg_564.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_Encrypt_MixColumns_fu_294_ap_done.read())))) {
        i_0_i2_reg_261 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_357_p2.read()))) {
        i_0_i_reg_272 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st23_fsm_20.read())) {
        i_0_i_reg_272 = i_3_reg_583.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_11.read())) {
        i_i_reg_250 = i_4_reg_532.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_357_p2.read()))) {
        i_i_reg_250 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_442_p2.read()))) {
        indvar6_reg_283 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
                !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_466_p2.read()))) {
        indvar6_reg_283 = indvar_next7_fu_472_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_489.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        indvar_reg_215 = indvar_next_reg_493.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        indvar_reg_215 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        ap_reg_ppstg_exitcond1_reg_489_pp0_iter1 = exitcond1_reg_489.read();
        ap_reg_ppstg_indvar_reg_215_pp0_iter1 = indvar_reg_215.read();
        exitcond1_reg_489 = exitcond1_fu_322_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())))) {
        ap_reg_ppstg_exitcond8_reg_603_pp1_iter1 = exitcond8_reg_603.read();
        ap_reg_ppstg_is_0iter_reg_617_pp1_iter1 = is_0iter_reg_617.read();
        exitcond8_reg_603 = exitcond8_fu_466_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st13_fsm_10.read())) {
        cipher_load_reg_547 = cipher_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read())) {
        i_3_reg_583 = i_3_fu_448_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read())) {
        i_4_reg_532 = i_4_fu_375_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read())) {
        i_5_reg_524 = i_5_fu_363_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_15.read())) {
        i_6_reg_564 = i_6_fu_417_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_3.read())) {
        i_reg_506 = i_fu_345_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        indvar_next_reg_493 = indvar_next_fu_328_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_466_p2.read()))) {
        is_0iter_reg_617 = is_0iter_fu_483_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && esl_seteq<1,1,1>(exitcond1_reg_489.read(), ap_const_lv1_0) && !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        iv_read_reg_498 = iv_datain.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st19_fsm_16.read()))) {
        reg_312 = grp_fu_306_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_8.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
  !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))))) {
        reg_317 = state_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i1_fu_339_p2.read()))) {
        state_addr_31_reg_516 =  (sc_lv<4>) (tmp_17_fu_351_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_442_p2.read()))) {
        state_addr_33_reg_593 =  (sc_lv<4>) (tmp_19_fu_454_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i3_fu_369_p2.read()))) {
        state_addr_34_reg_537 =  (sc_lv<4>) (tmp_i_fu_381_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_15.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i2_fu_411_p2.read()))) {
        state_addr_36_reg_574 =  (sc_lv<4>) (tmp_25_fu_423_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st22_fsm_19.read())) {
        tmp_20_reg_598 = tmp_20_fu_460_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_12.read()) && !esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_Encrypt_ShiftRows_fu_301_ap_done.read()))) {
        tmp_21_reg_552 = tmp_21_fu_391_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_Encrypt_MixColumns_fu_294_ap_done.read())))) {
        tmp_24_reg_556 = tmp_24_fu_405_p2.read();
    }
}

void AES_Encrypt::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st27_fsm_22.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st27_fsm_22.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void AES_Encrypt::thread_ap_sig_147() {
    ap_sig_147 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void AES_Encrypt::thread_ap_sig_156() {
    ap_sig_156 = (esl_seteq<1,1,1>(iv_rsp_empty_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond1_reg_489.read(), ap_const_lv1_0));
}

void AES_Encrypt::thread_ap_sig_173() {
    ap_sig_173 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void AES_Encrypt::thread_ap_sig_180() {
    ap_sig_180 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(16, 16));
}

void AES_Encrypt::thread_ap_sig_190() {
    ap_sig_190 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void AES_Encrypt::thread_ap_sig_197() {
    ap_sig_197 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(21, 21));
}

void AES_Encrypt::thread_ap_sig_209() {
    ap_sig_209 = (esl_seteq<1,1,1>(ciphertext_req_full_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond8_reg_603_pp1_iter1.read()));
}

void AES_Encrypt::thread_ap_sig_233() {
    ap_sig_233 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void AES_Encrypt::thread_ap_sig_249() {
    ap_sig_249 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void AES_Encrypt::thread_ap_sig_258() {
    ap_sig_258 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void AES_Encrypt::thread_ap_sig_272() {
    ap_sig_272 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void AES_Encrypt::thread_ap_sig_280() {
    ap_sig_280 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(10, 10));
}

void AES_Encrypt::thread_ap_sig_289() {
    ap_sig_289 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(12, 12));
}

void AES_Encrypt::thread_ap_sig_302() {
    ap_sig_302 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(14, 14));
}

void AES_Encrypt::thread_ap_sig_317() {
    ap_sig_317 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(15, 15));
}

void AES_Encrypt::thread_ap_sig_333() {
    ap_sig_333 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(18, 18));
}

void AES_Encrypt::thread_ap_sig_350() {
    ap_sig_350 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(19, 19));
}

void AES_Encrypt::thread_ap_sig_372() {
    ap_sig_372 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void AES_Encrypt::thread_ap_sig_40() {
    ap_sig_40 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void AES_Encrypt::thread_ap_sig_435() {
    ap_sig_435 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void AES_Encrypt::thread_ap_sig_455() {
    ap_sig_455 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(11, 11));
}

void AES_Encrypt::thread_ap_sig_464() {
    ap_sig_464 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(17, 17));
}

void AES_Encrypt::thread_ap_sig_473() {
    ap_sig_473 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(20, 20));
}

void AES_Encrypt::thread_ap_sig_486() {
    ap_sig_486 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(13, 13));
}

void AES_Encrypt::thread_ap_sig_638() {
    ap_sig_638 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(22, 22));
}

void AES_Encrypt::thread_ap_sig_cseq_ST_pp0_stg0_fsm_2() {
    if (ap_sig_147.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_pp1_stg0_fsm_21() {
    if (ap_sig_197.read()) {
        ap_sig_cseq_ST_pp1_stg0_fsm_21 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp1_stg0_fsm_21 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st10_fsm_7() {
    if (ap_sig_258.read()) {
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st11_fsm_8() {
    if (ap_sig_190.read()) {
        ap_sig_cseq_ST_st11_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st11_fsm_8 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st12_fsm_9() {
    if (ap_sig_272.read()) {
        ap_sig_cseq_ST_st12_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st12_fsm_9 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st13_fsm_10() {
    if (ap_sig_280.read()) {
        ap_sig_cseq_ST_st13_fsm_10 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st13_fsm_10 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st14_fsm_11() {
    if (ap_sig_455.read()) {
        ap_sig_cseq_ST_st14_fsm_11 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st14_fsm_11 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st15_fsm_12() {
    if (ap_sig_289.read()) {
        ap_sig_cseq_ST_st15_fsm_12 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st15_fsm_12 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st16_fsm_13() {
    if (ap_sig_486.read()) {
        ap_sig_cseq_ST_st16_fsm_13 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st16_fsm_13 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st17_fsm_14() {
    if (ap_sig_302.read()) {
        ap_sig_cseq_ST_st17_fsm_14 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st17_fsm_14 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st18_fsm_15() {
    if (ap_sig_317.read()) {
        ap_sig_cseq_ST_st18_fsm_15 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st18_fsm_15 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st19_fsm_16() {
    if (ap_sig_180.read()) {
        ap_sig_cseq_ST_st19_fsm_16 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st19_fsm_16 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_40.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st20_fsm_17() {
    if (ap_sig_464.read()) {
        ap_sig_cseq_ST_st20_fsm_17 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st20_fsm_17 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st21_fsm_18() {
    if (ap_sig_333.read()) {
        ap_sig_cseq_ST_st21_fsm_18 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st21_fsm_18 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st22_fsm_19() {
    if (ap_sig_350.read()) {
        ap_sig_cseq_ST_st22_fsm_19 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st22_fsm_19 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st23_fsm_20() {
    if (ap_sig_473.read()) {
        ap_sig_cseq_ST_st23_fsm_20 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st23_fsm_20 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st27_fsm_22() {
    if (ap_sig_638.read()) {
        ap_sig_cseq_ST_st27_fsm_22 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st27_fsm_22 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_372.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st6_fsm_3() {
    if (ap_sig_233.read()) {
        ap_sig_cseq_ST_st6_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_3 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st7_fsm_4() {
    if (ap_sig_173.read()) {
        ap_sig_cseq_ST_st7_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_4 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st8_fsm_5() {
    if (ap_sig_435.read()) {
        ap_sig_cseq_ST_st8_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_5 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ap_sig_cseq_ST_st9_fsm_6() {
    if (ap_sig_249.read()) {
        ap_sig_cseq_ST_st9_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_6 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_cipher_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_9.read())) {
        cipher_address0 =  (sc_lv<10>) (tmp_1_i_fu_386_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()))) {
        cipher_address0 = ap_const_lv10_0;
    } else {
        cipher_address0 = "XXXXXXXXXX";
    }
}

void AES_Encrypt::thread_cipher_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_9.read())) {
        cipher_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()))) {
        cipher_ce0 = ap_const_logic_0;
    } else {
        cipher_ce0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ciphertext_address() {
    ciphertext_address = ap_const_lv32_0;
}

void AES_Encrypt::thread_ciphertext_dataout() {
    ciphertext_dataout = reg_317.read();
}

void AES_Encrypt::thread_ciphertext_req_din() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
          !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_is_0iter_reg_617_pp1_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond8_reg_603_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
          !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))))) {
        ciphertext_req_din = ap_const_logic_1;
    } else {
        ciphertext_req_din = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ciphertext_req_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
          !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_is_0iter_reg_617_pp1_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond8_reg_603_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
          !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))))) {
        ciphertext_req_write = ap_const_logic_1;
    } else {
        ciphertext_req_write = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_ciphertext_rsp_read() {
    ciphertext_rsp_read = ap_const_logic_0;
}

void AES_Encrypt::thread_ciphertext_size() {
    ciphertext_size = ap_const_lv32_10;
}

void AES_Encrypt::thread_exitcond1_fu_322_p2() {
    exitcond1_fu_322_p2 = (!indvar_phi_fu_219_p4.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(indvar_phi_fu_219_p4.read() == ap_const_lv5_10);
}

void AES_Encrypt::thread_exitcond8_fu_466_p2() {
    exitcond8_fu_466_p2 = (!indvar6_reg_283.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(indvar6_reg_283.read() == ap_const_lv5_10);
}

void AES_Encrypt::thread_exitcond_fu_357_p2() {
    exitcond_fu_357_p2 = (!i4_reg_238.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i4_reg_238.read() == ap_const_lv4_A);
}

void AES_Encrypt::thread_exitcond_i1_fu_339_p2() {
    exitcond_i1_fu_339_p2 = (!i_0_i1_reg_227.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i1_reg_227.read() == ap_const_lv5_10);
}

void AES_Encrypt::thread_exitcond_i2_fu_411_p2() {
    exitcond_i2_fu_411_p2 = (!i_0_i2_reg_261.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i2_reg_261.read() == ap_const_lv5_10);
}

void AES_Encrypt::thread_exitcond_i3_fu_369_p2() {
    exitcond_i3_fu_369_p2 = (!i_i_reg_250.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_250.read() == ap_const_lv5_10);
}

void AES_Encrypt::thread_exitcond_i_fu_442_p2() {
    exitcond_i_fu_442_p2 = (!i_0_i_reg_272.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_272.read() == ap_const_lv5_10);
}

void AES_Encrypt::thread_expandedKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_15.read())) {
        expandedKey_address0 =  (sc_lv<8>) (sum5_cast_fu_437_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_3.read())) {
        expandedKey_address0 =  (sc_lv<8>) (tmp_17_fu_351_p1.read());
    } else {
        expandedKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_Encrypt::thread_expandedKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_15.read()))) {
        expandedKey_ce0 = ap_const_logic_1;
    } else {
        expandedKey_ce0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_grp_AES_Encrypt_MixColumns_fu_294_ap_start() {
    grp_AES_Encrypt_MixColumns_fu_294_ap_start = ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start.read();
}

void AES_Encrypt::thread_grp_AES_Encrypt_ShiftRows_fu_301_ap_start() {
    grp_AES_Encrypt_ShiftRows_fu_301_ap_start = ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start.read();
}

void AES_Encrypt::thread_grp_fu_306_p2() {
    grp_fu_306_p2 = (state_q0.read() ^ expandedKey_q0.read());
}

void AES_Encrypt::thread_i_3_fu_448_p2() {
    i_3_fu_448_p2 = (!i_0_i_reg_272.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_reg_272.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_Encrypt::thread_i_4_fu_375_p2() {
    i_4_fu_375_p2 = (!i_i_reg_250.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i_reg_250.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_Encrypt::thread_i_5_fu_363_p2() {
    i_5_fu_363_p2 = (!i4_reg_238.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i4_reg_238.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void AES_Encrypt::thread_i_6_fu_417_p2() {
    i_6_fu_417_p2 = (!i_0_i2_reg_261.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i2_reg_261.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_Encrypt::thread_i_fu_345_p2() {
    i_fu_345_p2 = (!i_0_i1_reg_227.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i1_reg_227.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_Encrypt::thread_indvar_next7_fu_472_p2() {
    indvar_next7_fu_472_p2 = (!indvar6_reg_283.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(indvar6_reg_283.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_Encrypt::thread_indvar_next_fu_328_p2() {
    indvar_next_fu_328_p2 = (!indvar_phi_fu_219_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(indvar_phi_fu_219_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_Encrypt::thread_indvar_phi_fu_219_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_489.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
        indvar_phi_fu_219_p4 = indvar_next_reg_493.read();
    } else {
        indvar_phi_fu_219_p4 = indvar_reg_215.read();
    }
}

void AES_Encrypt::thread_is_0iter_fu_483_p2() {
    is_0iter_fu_483_p2 = (!indvar6_reg_283.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(indvar6_reg_283.read() == ap_const_lv5_0);
}

void AES_Encrypt::thread_iv_address() {
    iv_address = ap_const_lv32_0;
}

void AES_Encrypt::thread_iv_dataout() {
    iv_dataout = ap_const_lv8_0;
}

void AES_Encrypt::thread_iv_req_din() {
    iv_req_din = ap_const_logic_0;
}

void AES_Encrypt::thread_iv_req_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        iv_req_write = ap_const_logic_1;
    } else {
        iv_req_write = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_iv_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_2.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_489.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        iv_rsp_read = ap_const_logic_1;
    } else {
        iv_rsp_read = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_iv_size() {
    iv_size = ap_const_lv32_10;
}

void AES_Encrypt::thread_newState_address0() {
    newState_address0 =  (sc_lv<4>) (tmp_19_fu_454_p1.read());
}

void AES_Encrypt::thread_newState_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read())) {
        newState_ce0 = ap_const_logic_1;
    } else {
        newState_ce0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st23_fsm_20.read())) {
        state_address0 = state_addr_33_reg_593.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_17.read())) {
        state_address0 = state_addr_36_reg_574.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_11.read())) {
        state_address0 = state_addr_34_reg_537.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_5.read())) {
        state_address0 = state_addr_31_reg_516.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) {
        state_address0 =  (sc_lv<4>) (tmp_s_fu_334_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()))) {
        state_address0 =  (sc_lv<4>) (tmp_22_fu_478_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read())) {
        state_address0 =  (sc_lv<4>) (tmp_19_fu_454_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_15.read())) {
        state_address0 =  (sc_lv<4>) (tmp_25_fu_423_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i3_fu_369_p2.read()))) {
        state_address0 =  (sc_lv<4>) (tmp_i_fu_381_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_3.read())) {
        state_address0 =  (sc_lv<4>) (tmp_17_fu_351_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_12.read())) {
        state_address0 = grp_AES_Encrypt_ShiftRows_fu_301_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()))) {
        state_address0 = grp_AES_Encrypt_MixColumns_fu_294_state_address0.read();
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void AES_Encrypt::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_12.read())) {
        state_address1 = grp_AES_Encrypt_ShiftRows_fu_301_state_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()))) {
        state_address1 = grp_AES_Encrypt_MixColumns_fu_294_state_address1.read();
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void AES_Encrypt::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i3_fu_369_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_18.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_21.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
          !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st23_fsm_20.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
        state_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_12.read())) {
        state_ce0 = grp_AES_Encrypt_ShiftRows_fu_301_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()))) {
        state_ce0 = grp_AES_Encrypt_MixColumns_fu_294_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_state_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_12.read())) {
        state_ce1 = grp_AES_Encrypt_ShiftRows_fu_301_state_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()))) {
        state_ce1 = grp_AES_Encrypt_MixColumns_fu_294_state_ce1.read();
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st23_fsm_20.read())) {
        state_d0 = tmp_20_reg_598.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_11.read())) {
        state_d0 = cipher_load_reg_547.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_17.read()))) {
        state_d0 = reg_312.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) {
        state_d0 = iv_read_reg_498.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_12.read())) {
        state_d0 = grp_AES_Encrypt_ShiftRows_fu_301_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()))) {
        state_d0 = grp_AES_Encrypt_MixColumns_fu_294_state_d0.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_Encrypt::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st23_fsm_20.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond1_reg_489_pp0_iter1.read())))) {
        state_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_12.read())) {
        state_we0 = grp_AES_Encrypt_ShiftRows_fu_301_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()))) {
        state_we0 = grp_AES_Encrypt_MixColumns_fu_294_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void AES_Encrypt::thread_sum5_cast_fu_437_p1() {
    sum5_cast_fu_437_p1 = esl_zext<64,8>(sum5_fu_432_p2.read());
}

void AES_Encrypt::thread_sum5_fu_432_p2() {
    sum5_fu_432_p2 = (!tmp_24_reg_556.read().is_01() || !tmp_74_cast_fu_428_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_24_reg_556.read()) + sc_biguint<8>(tmp_74_cast_fu_428_p1.read()));
}

void AES_Encrypt::thread_tmp_17_fu_351_p1() {
    tmp_17_fu_351_p1 = esl_zext<64,5>(i_0_i1_reg_227.read());
}

void AES_Encrypt::thread_tmp_19_fu_454_p1() {
    tmp_19_fu_454_p1 = esl_zext<64,5>(i_0_i_reg_272.read());
}

void AES_Encrypt::thread_tmp_1_i_fu_386_p1() {
    tmp_1_i_fu_386_p1 = esl_zext<64,8>(reg_317.read());
}

void AES_Encrypt::thread_tmp_20_fu_460_p2() {
    tmp_20_fu_460_p2 = (state_q0.read() ^ newState_q0.read());
}

void AES_Encrypt::thread_tmp_21_fu_391_p2() {
    tmp_21_fu_391_p2 = (!i4_reg_238.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i4_reg_238.read() == ap_const_lv4_9);
}

void AES_Encrypt::thread_tmp_22_fu_478_p1() {
    tmp_22_fu_478_p1 = esl_zext<64,5>(indvar6_reg_283.read());
}

void AES_Encrypt::thread_tmp_23_fu_397_p3() {
    tmp_23_fu_397_p3 = esl_concat<4,4>(i4_reg_238.read(), ap_const_lv4_0);
}

void AES_Encrypt::thread_tmp_24_fu_405_p2() {
    tmp_24_fu_405_p2 = (!tmp_23_fu_397_p3.read().is_01() || !ap_const_lv8_10.is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_23_fu_397_p3.read()) + sc_biguint<8>(ap_const_lv8_10));
}

void AES_Encrypt::thread_tmp_25_fu_423_p1() {
    tmp_25_fu_423_p1 = esl_zext<64,5>(i_0_i2_reg_261.read());
}

void AES_Encrypt::thread_tmp_74_cast_fu_428_p1() {
    tmp_74_cast_fu_428_p1 = esl_zext<8,5>(i_0_i2_reg_261.read());
}

void AES_Encrypt::thread_tmp_i_fu_381_p1() {
    tmp_i_fu_381_p1 = esl_zext<64,5>(i_i_reg_250.read());
}

void AES_Encrypt::thread_tmp_s_fu_334_p1() {
    tmp_s_fu_334_p1 = esl_zext<64,5>(ap_reg_ppstg_indvar_reg_215_pp0_iter1.read());
}

void AES_Encrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_322_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  !(ap_sig_156.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_322_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_st6_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i1_fu_339_p2.read())) {
                ap_NS_fsm = ap_ST_st9_fsm_6;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st8_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st6_fsm_3;
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_357_p2.read())) {
                ap_NS_fsm = ap_ST_st10_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st21_fsm_18;
            }
            break;
        case 128 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i3_fu_369_p2.read())) {
                ap_NS_fsm = ap_ST_st15_fsm_12;
            } else {
                ap_NS_fsm = ap_ST_st11_fsm_8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st12_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st13_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st14_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st10_fsm_7;
            break;
        case 4096 : 
            if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_Encrypt_ShiftRows_fu_301_ap_done.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_fu_391_p2.read()))) {
                ap_NS_fsm = ap_ST_st17_fsm_14;
            } else if ((!esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_Encrypt_ShiftRows_fu_301_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_fu_391_p2.read()))) {
                ap_NS_fsm = ap_ST_st16_fsm_13;
            } else {
                ap_NS_fsm = ap_ST_st15_fsm_12;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st17_fsm_14;
            break;
        case 16384 : 
            if (!(esl_seteq<1,1,1>(ap_const_lv1_0, tmp_21_reg_552.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_Encrypt_MixColumns_fu_294_ap_done.read()))) {
                ap_NS_fsm = ap_ST_st18_fsm_15;
            } else {
                ap_NS_fsm = ap_ST_st17_fsm_14;
            }
            break;
        case 32768 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i2_fu_411_p2.read())) {
                ap_NS_fsm = ap_ST_st9_fsm_6;
            } else {
                ap_NS_fsm = ap_ST_st19_fsm_16;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st20_fsm_17;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_st18_fsm_15;
            break;
        case 262144 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_442_p2.read())) {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_21;
            } else {
                ap_NS_fsm = ap_ST_st22_fsm_19;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_st23_fsm_20;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_st21_fsm_18;
            break;
        case 2097152 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_466_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())))) {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_21;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
  !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
  !(ap_sig_209.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_466_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())))) {
                ap_NS_fsm = ap_ST_st27_fsm_22;
            } else {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_21;
            }
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<23>) ("XXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void AES_Encrypt::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ciphertext_req_din\" :  \"" << ciphertext_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ciphertext_req_full_n\" :  \"" << ciphertext_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_req_write\" :  \"" << ciphertext_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ciphertext_rsp_empty_n\" :  \"" << ciphertext_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_rsp_read\" :  \"" << ciphertext_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_address\" :  \"" << ciphertext_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ciphertext_datain\" :  \"" << ciphertext_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_dataout\" :  \"" << ciphertext_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ciphertext_size\" :  \"" << ciphertext_size.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_req_din\" :  \"" << iv_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iv_req_full_n\" :  \"" << iv_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_req_write\" :  \"" << iv_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iv_rsp_empty_n\" :  \"" << iv_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_rsp_read\" :  \"" << iv_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_address\" :  \"" << iv_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iv_datain\" :  \"" << iv_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_dataout\" :  \"" << iv_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_size\" :  \"" << iv_size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_AWVALID\" :  \"" << s_axi_CRTLSc_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLSc_AWREADY\" :  \"" << s_axi_CRTLSc_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_AWADDR\" :  \"" << s_axi_CRTLSc_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_WVALID\" :  \"" << s_axi_CRTLSc_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLSc_WREADY\" :  \"" << s_axi_CRTLSc_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_WDATA\" :  \"" << s_axi_CRTLSc_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_WSTRB\" :  \"" << s_axi_CRTLSc_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_ARVALID\" :  \"" << s_axi_CRTLSc_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLSc_ARREADY\" :  \"" << s_axi_CRTLSc_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_ARADDR\" :  \"" << s_axi_CRTLSc_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLSc_RVALID\" :  \"" << s_axi_CRTLSc_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_RREADY\" :  \"" << s_axi_CRTLSc_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLSc_RDATA\" :  \"" << s_axi_CRTLSc_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLSc_RRESP\" :  \"" << s_axi_CRTLSc_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLSc_BVALID\" :  \"" << s_axi_CRTLSc_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTLSc_BREADY\" :  \"" << s_axi_CRTLSc_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTLSc_BRESP\" :  \"" << s_axi_CRTLSc_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

