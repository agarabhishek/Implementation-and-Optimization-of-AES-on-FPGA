-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_Encrypt is
generic (
    C_S_AXI_CRTLSC_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_CRTLSC_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ciphertext_req_din : OUT STD_LOGIC;
    ciphertext_req_full_n : IN STD_LOGIC;
    ciphertext_req_write : OUT STD_LOGIC;
    ciphertext_rsp_empty_n : IN STD_LOGIC;
    ciphertext_rsp_read : OUT STD_LOGIC;
    ciphertext_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    ciphertext_datain : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_dataout : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    iv_req_din : OUT STD_LOGIC;
    iv_req_full_n : IN STD_LOGIC;
    iv_req_write : OUT STD_LOGIC;
    iv_rsp_empty_n : IN STD_LOGIC;
    iv_rsp_read : OUT STD_LOGIC;
    iv_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    iv_datain : IN STD_LOGIC_VECTOR (7 downto 0);
    iv_dataout : OUT STD_LOGIC_VECTOR (7 downto 0);
    iv_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axi_CRTLSc_AWVALID : IN STD_LOGIC;
    s_axi_CRTLSc_AWREADY : OUT STD_LOGIC;
    s_axi_CRTLSc_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLSC_ADDR_WIDTH-1 downto 0);
    s_axi_CRTLSc_WVALID : IN STD_LOGIC;
    s_axi_CRTLSc_WREADY : OUT STD_LOGIC;
    s_axi_CRTLSc_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLSC_DATA_WIDTH-1 downto 0);
    s_axi_CRTLSc_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLSC_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTLSc_ARVALID : IN STD_LOGIC;
    s_axi_CRTLSc_ARREADY : OUT STD_LOGIC;
    s_axi_CRTLSc_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLSC_ADDR_WIDTH-1 downto 0);
    s_axi_CRTLSc_RVALID : OUT STD_LOGIC;
    s_axi_CRTLSc_RREADY : IN STD_LOGIC;
    s_axi_CRTLSc_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTLSC_DATA_WIDTH-1 downto 0);
    s_axi_CRTLSc_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTLSc_BVALID : OUT STD_LOGIC;
    s_axi_CRTLSc_BREADY : IN STD_LOGIC;
    s_axi_CRTLSc_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of AES_Encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AES_Encrypt,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=4.100000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.100000,HLS_SYN_LAT=2357,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=627,HLS_SYN_LUT=944}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_st6_fsm_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_st7_fsm_4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_st8_fsm_5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_st9_fsm_6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_st11_fsm_8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_st12_fsm_9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_st13_fsm_10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_st14_fsm_11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_st15_fsm_12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_st16_fsm_13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_st17_fsm_14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_st18_fsm_15 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_st19_fsm_16 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_st20_fsm_17 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_st21_fsm_18 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_st22_fsm_19 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_st23_fsm_20 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_pp1_stg0_fsm_21 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_st27_fsm_22 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_40 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal newState_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal newState_ce0 : STD_LOGIC;
    signal newState_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal expandedKey_ce0 : STD_LOGIC;
    signal expandedKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Nr : STD_LOGIC_VECTOR (15 downto 0);
    signal cipher_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce0 : STD_LOGIC;
    signal cipher_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_reg_215 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_indvar_reg_215_pp0_iter1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_147 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_156 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar6_reg_283 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_4 : STD_LOGIC;
    signal ap_sig_173 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_16 : STD_LOGIC;
    signal ap_sig_180 : BOOLEAN;
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_8 : STD_LOGIC;
    signal ap_sig_190 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg0_fsm_21 : STD_LOGIC;
    signal ap_sig_197 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond8_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond8_reg_603_pp1_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_209 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal exitcond1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_489_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_328_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_next_reg_493 : STD_LOGIC_VECTOR (4 downto 0);
    signal iv_read_reg_498 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_345_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_506 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_3 : STD_LOGIC;
    signal ap_sig_233 : BOOLEAN;
    signal exitcond_i1_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_31_reg_516 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_fu_363_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_524 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_6 : STD_LOGIC;
    signal ap_sig_249 : BOOLEAN;
    signal i_4_fu_375_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_532 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_7 : STD_LOGIC;
    signal ap_sig_258 : BOOLEAN;
    signal state_addr_34_reg_537 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i3_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_9 : STD_LOGIC;
    signal ap_sig_272 : BOOLEAN;
    signal cipher_load_reg_547 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_10 : STD_LOGIC;
    signal ap_sig_280 : BOOLEAN;
    signal tmp_21_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_12 : STD_LOGIC;
    signal ap_sig_289 : BOOLEAN;
    signal grp_AES_Encrypt_ShiftRows_fu_301_ap_done : STD_LOGIC;
    signal tmp_24_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_reg_556 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_14 : STD_LOGIC;
    signal ap_sig_302 : BOOLEAN;
    signal grp_AES_Encrypt_MixColumns_fu_294_ap_done : STD_LOGIC;
    signal i_6_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_564 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_15 : STD_LOGIC;
    signal ap_sig_317 : BOOLEAN;
    signal exitcond_i2_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_36_reg_574 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_18 : STD_LOGIC;
    signal ap_sig_333 : BOOLEAN;
    signal i_3_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_583 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_addr_33_reg_593 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_19 : STD_LOGIC;
    signal ap_sig_350 : BOOLEAN;
    signal exitcond8_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next7_fu_472_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal is_0iter_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_0iter_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_is_0iter_reg_617_pp1_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_372 : BOOLEAN;
    signal state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce1 : STD_LOGIC;
    signal state_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Encrypt_MixColumns_fu_294_ap_start : STD_LOGIC;
    signal grp_AES_Encrypt_MixColumns_fu_294_ap_idle : STD_LOGIC;
    signal grp_AES_Encrypt_MixColumns_fu_294_ap_ready : STD_LOGIC;
    signal grp_AES_Encrypt_MixColumns_fu_294_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Encrypt_MixColumns_fu_294_state_ce0 : STD_LOGIC;
    signal grp_AES_Encrypt_MixColumns_fu_294_state_we0 : STD_LOGIC;
    signal grp_AES_Encrypt_MixColumns_fu_294_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Encrypt_MixColumns_fu_294_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Encrypt_MixColumns_fu_294_state_ce1 : STD_LOGIC;
    signal grp_AES_Encrypt_ShiftRows_fu_301_ap_start : STD_LOGIC;
    signal grp_AES_Encrypt_ShiftRows_fu_301_ap_idle : STD_LOGIC;
    signal grp_AES_Encrypt_ShiftRows_fu_301_ap_ready : STD_LOGIC;
    signal grp_AES_Encrypt_ShiftRows_fu_301_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Encrypt_ShiftRows_fu_301_state_ce0 : STD_LOGIC;
    signal grp_AES_Encrypt_ShiftRows_fu_301_state_we0 : STD_LOGIC;
    signal grp_AES_Encrypt_ShiftRows_fu_301_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_Encrypt_ShiftRows_fu_301_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_Encrypt_ShiftRows_fu_301_state_ce1 : STD_LOGIC;
    signal indvar_phi_fu_219_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i1_reg_227 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_5 : STD_LOGIC;
    signal ap_sig_435 : BOOLEAN;
    signal i4_reg_238 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i_reg_250 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_11 : STD_LOGIC;
    signal ap_sig_455 : BOOLEAN;
    signal i_0_i2_reg_261 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_17 : STD_LOGIC;
    signal ap_sig_464 : BOOLEAN;
    signal i_0_i_reg_272 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_20 : STD_LOGIC;
    signal ap_sig_473 : BOOLEAN;
    signal ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st16_fsm_13 : STD_LOGIC;
    signal ap_sig_486 : BOOLEAN;
    signal ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start : STD_LOGIC := '0';
    signal tmp_s_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_397_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_74_cast_fu_428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum5_fu_432_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_22 : STD_LOGIC;
    signal ap_sig_638 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component AES_Encrypt_MixColumns IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Encrypt_ShiftRows IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Encrypt_MixColumns_cipher IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Encrypt_state IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Encrypt_CRTLSc_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        newState_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        newState_ce0 : IN STD_LOGIC;
        newState_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        expandedKey_ce0 : IN STD_LOGIC;
        expandedKey_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Nr : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    cipher_U : component AES_Encrypt_MixColumns_cipher
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cipher_address0,
        ce0 => cipher_ce0,
        q0 => cipher_q0,
        address1 => ap_const_lv10_0,
        ce1 => ap_const_logic_0,
        q1 => cipher_q1,
        address2 => ap_const_lv10_0,
        ce2 => ap_const_logic_0,
        q2 => cipher_q2,
        address3 => ap_const_lv10_0,
        ce3 => ap_const_logic_0,
        q3 => cipher_q3);

    AES_Encrypt_CRTLSc_s_axi_U : component AES_Encrypt_CRTLSc_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTLSC_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTLSC_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTLSc_AWVALID,
        AWREADY => s_axi_CRTLSc_AWREADY,
        AWADDR => s_axi_CRTLSc_AWADDR,
        WVALID => s_axi_CRTLSc_WVALID,
        WREADY => s_axi_CRTLSc_WREADY,
        WDATA => s_axi_CRTLSc_WDATA,
        WSTRB => s_axi_CRTLSc_WSTRB,
        ARVALID => s_axi_CRTLSc_ARVALID,
        ARREADY => s_axi_CRTLSc_ARREADY,
        ARADDR => s_axi_CRTLSc_ARADDR,
        RVALID => s_axi_CRTLSc_RVALID,
        RREADY => s_axi_CRTLSc_RREADY,
        RDATA => s_axi_CRTLSc_RDATA,
        RRESP => s_axi_CRTLSc_RRESP,
        BVALID => s_axi_CRTLSc_BVALID,
        BREADY => s_axi_CRTLSc_BREADY,
        BRESP => s_axi_CRTLSc_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        newState_address0 => newState_address0,
        newState_ce0 => newState_ce0,
        newState_q0 => newState_q0,
        expandedKey_address0 => expandedKey_address0,
        expandedKey_ce0 => expandedKey_ce0,
        expandedKey_q0 => expandedKey_q0,
        Nr => Nr);

    state_U : component AES_Encrypt_state
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0,
        address1 => state_address1,
        ce1 => state_ce1,
        q1 => state_q1);

    grp_AES_Encrypt_MixColumns_fu_294 : component AES_Encrypt_MixColumns
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_Encrypt_MixColumns_fu_294_ap_start,
        ap_done => grp_AES_Encrypt_MixColumns_fu_294_ap_done,
        ap_idle => grp_AES_Encrypt_MixColumns_fu_294_ap_idle,
        ap_ready => grp_AES_Encrypt_MixColumns_fu_294_ap_ready,
        state_address0 => grp_AES_Encrypt_MixColumns_fu_294_state_address0,
        state_ce0 => grp_AES_Encrypt_MixColumns_fu_294_state_ce0,
        state_we0 => grp_AES_Encrypt_MixColumns_fu_294_state_we0,
        state_d0 => grp_AES_Encrypt_MixColumns_fu_294_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_AES_Encrypt_MixColumns_fu_294_state_address1,
        state_ce1 => grp_AES_Encrypt_MixColumns_fu_294_state_ce1,
        state_q1 => state_q1);

    grp_AES_Encrypt_ShiftRows_fu_301 : component AES_Encrypt_ShiftRows
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_Encrypt_ShiftRows_fu_301_ap_start,
        ap_done => grp_AES_Encrypt_ShiftRows_fu_301_ap_done,
        ap_idle => grp_AES_Encrypt_ShiftRows_fu_301_ap_idle,
        ap_ready => grp_AES_Encrypt_ShiftRows_fu_301_ap_ready,
        state_address0 => grp_AES_Encrypt_ShiftRows_fu_301_state_address0,
        state_ce0 => grp_AES_Encrypt_ShiftRows_fu_301_state_ce0,
        state_we0 => grp_AES_Encrypt_ShiftRows_fu_301_state_we0,
        state_d0 => grp_AES_Encrypt_ShiftRows_fu_301_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_AES_Encrypt_ShiftRows_fu_301_state_address1,
        state_ce1 => grp_AES_Encrypt_ShiftRows_fu_301_state_ce1,
        state_q1 => state_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_13)) then 
                    ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AES_Encrypt_MixColumns_fu_294_ap_ready)) then 
                    ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and not((ap_const_lv1_0 = exitcond_i3_fu_369_p2)))) then 
                    ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AES_Encrypt_ShiftRows_fu_301_ap_ready)) then 
                    ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_322_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond1_fu_322_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_322_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond8_fu_466_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18) and not((ap_const_lv1_0 = exitcond_i_fu_442_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond8_fu_466_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18) and not((ap_const_lv1_0 = exitcond_i_fu_442_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond8_fu_466_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18) and not((ap_const_lv1_0 = exitcond_i_fu_442_p2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i4_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3) and not((ap_const_lv1_0 = exitcond_i1_fu_339_p2)))) then 
                i4_reg_238 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_15) and not((ap_const_lv1_0 = exitcond_i2_fu_411_p2)))) then 
                i4_reg_238 <= i_5_reg_524;
            end if; 
        end if;
    end process;

    i_0_i1_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_322_p2)))) then 
                i_0_i1_reg_227 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
                i_0_i1_reg_227 <= i_reg_506;
            end if; 
        end if;
    end process;

    i_0_i2_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17)) then 
                i_0_i2_reg_261 <= i_6_reg_564;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and not(((ap_const_lv1_0 = tmp_21_reg_552) and (ap_const_logic_0 = grp_AES_Encrypt_MixColumns_fu_294_ap_done))))) then 
                i_0_i2_reg_261 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_357_p2)))) then 
                i_0_i_reg_272 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_20)) then 
                i_0_i_reg_272 <= i_3_reg_583;
            end if; 
        end if;
    end process;

    i_i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11)) then 
                i_i_reg_250 <= i_4_reg_532;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6) and (ap_const_lv1_0 = exitcond_fu_357_p2))) then 
                i_i_reg_250 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar6_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18) and not((ap_const_lv1_0 = exitcond_i_fu_442_p2)))) then 
                indvar6_reg_283 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond8_fu_466_p2))) then 
                indvar6_reg_283 <= indvar_next7_fu_472_p2;
            end if; 
        end if;
    end process;

    indvar_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_489 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_215 <= indvar_next_reg_493;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                indvar_reg_215 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond1_reg_489_pp0_iter1 <= exitcond1_reg_489;
                ap_reg_ppstg_indvar_reg_215_pp0_iter1 <= indvar_reg_215;
                exitcond1_reg_489 <= exitcond1_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                ap_reg_ppstg_exitcond8_reg_603_pp1_iter1 <= exitcond8_reg_603;
                ap_reg_ppstg_is_0iter_reg_617_pp1_iter1 <= is_0iter_reg_617;
                exitcond8_reg_603 <= exitcond8_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_10)) then
                cipher_load_reg_547 <= cipher_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18)) then
                i_3_reg_583 <= i_3_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7)) then
                i_4_reg_532 <= i_4_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_6)) then
                i_5_reg_524 <= i_5_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_15)) then
                i_6_reg_564 <= i_6_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then
                i_reg_506 <= i_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_493 <= indvar_next_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond8_fu_466_p2))) then
                is_0iter_reg_617 <= is_0iter_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_489 = ap_const_lv1_0) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                iv_read_reg_498 <= iv_datain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_16))) then
                reg_312 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))))) then
                reg_317 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3) and (ap_const_lv1_0 = exitcond_i1_fu_339_p2))) then
                state_addr_31_reg_516 <= tmp_17_fu_351_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18) and (ap_const_lv1_0 = exitcond_i_fu_442_p2))) then
                state_addr_33_reg_593 <= tmp_19_fu_454_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and (ap_const_lv1_0 = exitcond_i3_fu_369_p2))) then
                state_addr_34_reg_537 <= tmp_i_fu_381_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_15) and (ap_const_lv1_0 = exitcond_i2_fu_411_p2))) then
                state_addr_36_reg_574 <= tmp_25_fu_423_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_19)) then
                tmp_20_reg_598 <= tmp_20_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12) and not((ap_const_logic_0 = grp_AES_Encrypt_ShiftRows_fu_301_ap_done)))) then
                tmp_21_reg_552 <= tmp_21_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and not(((ap_const_lv1_0 = tmp_21_reg_552) and (ap_const_logic_0 = grp_AES_Encrypt_MixColumns_fu_294_ap_done))))) then
                    tmp_24_reg_556(7 downto 4) <= tmp_24_fu_405_p2(7 downto 4);
            end if;
        end if;
    end process;
    tmp_24_reg_556(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_156, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it0, ap_sig_209, ap_reg_ppiten_pp1_it2, exitcond1_fu_322_p2, exitcond_i1_fu_339_p2, exitcond_i3_fu_369_p2, tmp_21_fu_391_p2, tmp_21_reg_552, grp_AES_Encrypt_ShiftRows_fu_301_ap_done, grp_AES_Encrypt_MixColumns_fu_294_ap_done, exitcond_i2_fu_411_p2, exitcond_i_fu_442_p2, exitcond8_fu_466_p2, exitcond_fu_357_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_322_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_322_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st6_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_i1_fu_339_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_4;
                end if;
            when ap_ST_st7_fsm_4 => 
                ap_NS_fsm <= ap_ST_st8_fsm_5;
            when ap_ST_st8_fsm_5 => 
                ap_NS_fsm <= ap_ST_st6_fsm_3;
            when ap_ST_st9_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond_fu_357_p2)) then
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_18;
                end if;
            when ap_ST_st10_fsm_7 => 
                if (not((ap_const_lv1_0 = exitcond_i3_fu_369_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_8;
                end if;
            when ap_ST_st11_fsm_8 => 
                ap_NS_fsm <= ap_ST_st12_fsm_9;
            when ap_ST_st12_fsm_9 => 
                ap_NS_fsm <= ap_ST_st13_fsm_10;
            when ap_ST_st13_fsm_10 => 
                ap_NS_fsm <= ap_ST_st14_fsm_11;
            when ap_ST_st14_fsm_11 => 
                ap_NS_fsm <= ap_ST_st10_fsm_7;
            when ap_ST_st15_fsm_12 => 
                if ((not((ap_const_logic_0 = grp_AES_Encrypt_ShiftRows_fu_301_ap_done)) and not((ap_const_lv1_0 = tmp_21_fu_391_p2)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_14;
                elsif ((not((ap_const_logic_0 = grp_AES_Encrypt_ShiftRows_fu_301_ap_done)) and (ap_const_lv1_0 = tmp_21_fu_391_p2))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_12;
                end if;
            when ap_ST_st16_fsm_13 => 
                ap_NS_fsm <= ap_ST_st17_fsm_14;
            when ap_ST_st17_fsm_14 => 
                if (not(((ap_const_lv1_0 = tmp_21_reg_552) and (ap_const_logic_0 = grp_AES_Encrypt_MixColumns_fu_294_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_14;
                end if;
            when ap_ST_st18_fsm_15 => 
                if (not((ap_const_lv1_0 = exitcond_i2_fu_411_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_16;
                end if;
            when ap_ST_st19_fsm_16 => 
                ap_NS_fsm <= ap_ST_st20_fsm_17;
            when ap_ST_st20_fsm_17 => 
                ap_NS_fsm <= ap_ST_st18_fsm_15;
            when ap_ST_st21_fsm_18 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_442_p2))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_19;
                end if;
            when ap_ST_st22_fsm_19 => 
                ap_NS_fsm <= ap_ST_st23_fsm_20;
            when ap_ST_st23_fsm_20 => 
                ap_NS_fsm <= ap_ST_st21_fsm_18;
            when ap_ST_pp1_stg0_fsm_21 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond8_fu_466_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_21;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond8_fu_466_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_21;
                end if;
            when ap_ST_st27_fsm_22 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st27_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_22)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st27_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_147_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_147 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_156_assign_proc : process(iv_rsp_empty_n, exitcond1_reg_489)
    begin
                ap_sig_156 <= ((iv_rsp_empty_n = ap_const_logic_0) and (exitcond1_reg_489 = ap_const_lv1_0));
    end process;


    ap_sig_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_173 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_180 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_190_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_190 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_197 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_209_assign_proc : process(ciphertext_req_full_n, ap_reg_ppstg_exitcond8_reg_603_pp1_iter1)
    begin
                ap_sig_209 <= ((ciphertext_req_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_603_pp1_iter1));
    end process;


    ap_sig_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_233 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_249_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_249 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_258 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_272 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_280 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_289 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_302_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_302 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_317_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_317 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_333_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_333 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_350_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_350 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_372_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_372 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_40 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_435_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_435 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_455_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_455 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_464_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_464 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_473_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_473 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_486_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_486 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_638_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_638 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_147)
    begin
        if (ap_sig_147) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp1_stg0_fsm_21_assign_proc : process(ap_sig_197)
    begin
        if (ap_sig_197) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st10_fsm_7_assign_proc : process(ap_sig_258)
    begin
        if (ap_sig_258) then 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_8_assign_proc : process(ap_sig_190)
    begin
        if (ap_sig_190) then 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_9_assign_proc : process(ap_sig_272)
    begin
        if (ap_sig_272) then 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_10_assign_proc : process(ap_sig_280)
    begin
        if (ap_sig_280) then 
            ap_sig_cseq_ST_st13_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_11_assign_proc : process(ap_sig_455)
    begin
        if (ap_sig_455) then 
            ap_sig_cseq_ST_st14_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_12_assign_proc : process(ap_sig_289)
    begin
        if (ap_sig_289) then 
            ap_sig_cseq_ST_st15_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_13_assign_proc : process(ap_sig_486)
    begin
        if (ap_sig_486) then 
            ap_sig_cseq_ST_st16_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_14_assign_proc : process(ap_sig_302)
    begin
        if (ap_sig_302) then 
            ap_sig_cseq_ST_st17_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_15_assign_proc : process(ap_sig_317)
    begin
        if (ap_sig_317) then 
            ap_sig_cseq_ST_st18_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_16_assign_proc : process(ap_sig_180)
    begin
        if (ap_sig_180) then 
            ap_sig_cseq_ST_st19_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_40)
    begin
        if (ap_sig_40) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_17_assign_proc : process(ap_sig_464)
    begin
        if (ap_sig_464) then 
            ap_sig_cseq_ST_st20_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_18_assign_proc : process(ap_sig_333)
    begin
        if (ap_sig_333) then 
            ap_sig_cseq_ST_st21_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_19_assign_proc : process(ap_sig_350)
    begin
        if (ap_sig_350) then 
            ap_sig_cseq_ST_st22_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_20_assign_proc : process(ap_sig_473)
    begin
        if (ap_sig_473) then 
            ap_sig_cseq_ST_st23_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_22_assign_proc : process(ap_sig_638)
    begin
        if (ap_sig_638) then 
            ap_sig_cseq_ST_st27_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_372)
    begin
        if (ap_sig_372) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_3_assign_proc : process(ap_sig_233)
    begin
        if (ap_sig_233) then 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_4_assign_proc : process(ap_sig_173)
    begin
        if (ap_sig_173) then 
            ap_sig_cseq_ST_st7_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_5_assign_proc : process(ap_sig_435)
    begin
        if (ap_sig_435) then 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_6_assign_proc : process(ap_sig_249)
    begin
        if (ap_sig_249) then 
            ap_sig_cseq_ST_st9_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_address0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_9, tmp_21_reg_552, ap_sig_cseq_ST_st17_fsm_14, tmp_1_i_fu_386_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9)) then 
            cipher_address0 <= tmp_1_i_fu_386_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and (ap_const_lv1_0 = tmp_21_reg_552))) then 
            cipher_address0 <= ap_const_lv10_0;
        else 
            cipher_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_ce0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_9, tmp_21_reg_552, ap_sig_cseq_ST_st17_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9)) then 
            cipher_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and (ap_const_lv1_0 = tmp_21_reg_552))) then 
            cipher_ce0 <= ap_const_logic_0;
        else 
            cipher_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ciphertext_address <= ap_const_lv32_0;
    ciphertext_dataout <= reg_317;

    ciphertext_req_din_assign_proc : process(ap_reg_ppstg_exitcond8_reg_603_pp1_iter1, ap_sig_209, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_is_0iter_reg_617_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_is_0iter_reg_617_pp1_iter1))) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_603_pp1_iter1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))))) then 
            ciphertext_req_din <= ap_const_logic_1;
        else 
            ciphertext_req_din <= ap_const_logic_0;
        end if; 
    end process;


    ciphertext_req_write_assign_proc : process(ap_reg_ppstg_exitcond8_reg_603_pp1_iter1, ap_sig_209, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_is_0iter_reg_617_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_is_0iter_reg_617_pp1_iter1))) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_603_pp1_iter1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))))) then 
            ciphertext_req_write <= ap_const_logic_1;
        else 
            ciphertext_req_write <= ap_const_logic_0;
        end if; 
    end process;

    ciphertext_rsp_read <= ap_const_logic_0;
    ciphertext_size <= ap_const_lv32_10;
    exitcond1_fu_322_p2 <= "1" when (indvar_phi_fu_219_p4 = ap_const_lv5_10) else "0";
    exitcond8_fu_466_p2 <= "1" when (indvar6_reg_283 = ap_const_lv5_10) else "0";
    exitcond_fu_357_p2 <= "1" when (i4_reg_238 = ap_const_lv4_A) else "0";
    exitcond_i1_fu_339_p2 <= "1" when (i_0_i1_reg_227 = ap_const_lv5_10) else "0";
    exitcond_i2_fu_411_p2 <= "1" when (i_0_i2_reg_261 = ap_const_lv5_10) else "0";
    exitcond_i3_fu_369_p2 <= "1" when (i_i_reg_250 = ap_const_lv5_10) else "0";
    exitcond_i_fu_442_p2 <= "1" when (i_0_i_reg_272 = ap_const_lv5_10) else "0";

    expandedKey_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_3, ap_sig_cseq_ST_st18_fsm_15, tmp_17_fu_351_p1, sum5_cast_fu_437_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_15)) then 
            expandedKey_address0 <= sum5_cast_fu_437_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then 
            expandedKey_address0 <= tmp_17_fu_351_p1(8 - 1 downto 0);
        else 
            expandedKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_3, ap_sig_cseq_ST_st18_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_15))) then 
            expandedKey_ce0 <= ap_const_logic_1;
        else 
            expandedKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_AES_Encrypt_MixColumns_fu_294_ap_start <= ap_reg_grp_AES_Encrypt_MixColumns_fu_294_ap_start;
    grp_AES_Encrypt_ShiftRows_fu_301_ap_start <= ap_reg_grp_AES_Encrypt_ShiftRows_fu_301_ap_start;
    grp_fu_306_p2 <= (state_q0 xor expandedKey_q0);
    i_3_fu_448_p2 <= std_logic_vector(unsigned(i_0_i_reg_272) + unsigned(ap_const_lv5_1));
    i_4_fu_375_p2 <= std_logic_vector(unsigned(i_i_reg_250) + unsigned(ap_const_lv5_1));
    i_5_fu_363_p2 <= std_logic_vector(unsigned(i4_reg_238) + unsigned(ap_const_lv4_1));
    i_6_fu_417_p2 <= std_logic_vector(unsigned(i_0_i2_reg_261) + unsigned(ap_const_lv5_1));
    i_fu_345_p2 <= std_logic_vector(unsigned(i_0_i1_reg_227) + unsigned(ap_const_lv5_1));
    indvar_next7_fu_472_p2 <= std_logic_vector(unsigned(indvar6_reg_283) + unsigned(ap_const_lv5_1));
    indvar_next_fu_328_p2 <= std_logic_vector(unsigned(indvar_phi_fu_219_p4) + unsigned(ap_const_lv5_1));

    indvar_phi_fu_219_p4_assign_proc : process(indvar_reg_215, ap_sig_cseq_ST_pp0_stg0_fsm_2, exitcond1_reg_489, ap_reg_ppiten_pp0_it1, indvar_next_reg_493)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_489 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_219_p4 <= indvar_next_reg_493;
        else 
            indvar_phi_fu_219_p4 <= indvar_reg_215;
        end if; 
    end process;

    is_0iter_fu_483_p2 <= "1" when (indvar6_reg_283 = ap_const_lv5_0) else "0";
    iv_address <= ap_const_lv32_0;
    iv_dataout <= ap_const_lv8_0;
    iv_req_din <= ap_const_logic_0;

    iv_req_write_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            iv_req_write <= ap_const_logic_1;
        else 
            iv_req_write <= ap_const_logic_0;
        end if; 
    end process;


    iv_rsp_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, exitcond1_reg_489, ap_sig_156, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_489 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            iv_rsp_read <= ap_const_logic_1;
        else 
            iv_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    iv_size <= ap_const_lv32_10;
    newState_address0 <= tmp_19_fu_454_p1(4 - 1 downto 0);

    newState_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18)) then 
            newState_ce0 <= ap_const_logic_1;
        else 
            newState_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp1_stg0_fsm_21, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st6_fsm_3, state_addr_31_reg_516, ap_sig_cseq_ST_st10_fsm_7, state_addr_34_reg_537, exitcond_i3_fu_369_p2, tmp_21_reg_552, ap_sig_cseq_ST_st15_fsm_12, ap_sig_cseq_ST_st17_fsm_14, ap_sig_cseq_ST_st18_fsm_15, state_addr_36_reg_574, ap_sig_cseq_ST_st21_fsm_18, state_addr_33_reg_593, grp_AES_Encrypt_MixColumns_fu_294_state_address0, grp_AES_Encrypt_ShiftRows_fu_301_state_address0, ap_sig_cseq_ST_st8_fsm_5, ap_sig_cseq_ST_st14_fsm_11, ap_sig_cseq_ST_st20_fsm_17, ap_sig_cseq_ST_st23_fsm_20, tmp_s_fu_334_p1, tmp_17_fu_351_p1, tmp_i_fu_381_p1, tmp_25_fu_423_p1, tmp_19_fu_454_p1, tmp_22_fu_478_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_20)) then 
            state_address0 <= state_addr_33_reg_593;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17)) then 
            state_address0 <= state_addr_36_reg_574;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11)) then 
            state_address0 <= state_addr_34_reg_537;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5)) then 
            state_address0 <= state_addr_31_reg_516;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            state_address0 <= tmp_s_fu_334_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            state_address0 <= tmp_22_fu_478_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18)) then 
            state_address0 <= tmp_19_fu_454_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_15)) then 
            state_address0 <= tmp_25_fu_423_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and (ap_const_lv1_0 = exitcond_i3_fu_369_p2))) then 
            state_address0 <= tmp_i_fu_381_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then 
            state_address0 <= tmp_17_fu_351_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
            state_address0 <= grp_AES_Encrypt_ShiftRows_fu_301_state_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and (ap_const_lv1_0 = tmp_21_reg_552))) then 
            state_address0 <= grp_AES_Encrypt_MixColumns_fu_294_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(tmp_21_reg_552, ap_sig_cseq_ST_st15_fsm_12, ap_sig_cseq_ST_st17_fsm_14, grp_AES_Encrypt_MixColumns_fu_294_state_address1, grp_AES_Encrypt_ShiftRows_fu_301_state_address1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
            state_address1 <= grp_AES_Encrypt_ShiftRows_fu_301_state_address1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and (ap_const_lv1_0 = tmp_21_reg_552))) then 
            state_address1 <= grp_AES_Encrypt_MixColumns_fu_294_state_address1;
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_sig_156, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp1_stg0_fsm_21, ap_reg_ppiten_pp1_it0, ap_sig_209, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_st6_fsm_3, ap_sig_cseq_ST_st10_fsm_7, exitcond_i3_fu_369_p2, tmp_21_reg_552, ap_sig_cseq_ST_st15_fsm_12, ap_sig_cseq_ST_st17_fsm_14, ap_sig_cseq_ST_st18_fsm_15, ap_sig_cseq_ST_st21_fsm_18, grp_AES_Encrypt_MixColumns_fu_294_state_ce0, grp_AES_Encrypt_ShiftRows_fu_301_state_ce0, ap_sig_cseq_ST_st8_fsm_5, ap_sig_cseq_ST_st14_fsm_11, ap_sig_cseq_ST_st20_fsm_17, ap_sig_cseq_ST_st23_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7) and (ap_const_lv1_0 = exitcond_i3_fu_369_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_18) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_209 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_20) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            state_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
            state_ce0 <= grp_AES_Encrypt_ShiftRows_fu_301_state_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and (ap_const_lv1_0 = tmp_21_reg_552))) then 
            state_ce0 <= grp_AES_Encrypt_MixColumns_fu_294_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(tmp_21_reg_552, ap_sig_cseq_ST_st15_fsm_12, ap_sig_cseq_ST_st17_fsm_14, grp_AES_Encrypt_MixColumns_fu_294_state_ce1, grp_AES_Encrypt_ShiftRows_fu_301_state_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
            state_ce1 <= grp_AES_Encrypt_ShiftRows_fu_301_state_ce1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and (ap_const_lv1_0 = tmp_21_reg_552))) then 
            state_ce1 <= grp_AES_Encrypt_MixColumns_fu_294_state_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_reg_ppiten_pp0_it2, reg_312, iv_read_reg_498, cipher_load_reg_547, tmp_21_reg_552, ap_sig_cseq_ST_st15_fsm_12, ap_sig_cseq_ST_st17_fsm_14, tmp_20_reg_598, grp_AES_Encrypt_MixColumns_fu_294_state_d0, grp_AES_Encrypt_ShiftRows_fu_301_state_d0, ap_sig_cseq_ST_st8_fsm_5, ap_sig_cseq_ST_st14_fsm_11, ap_sig_cseq_ST_st20_fsm_17, ap_sig_cseq_ST_st23_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_20)) then 
            state_d0 <= tmp_20_reg_598;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11)) then 
            state_d0 <= cipher_load_reg_547;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17))) then 
            state_d0 <= reg_312;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            state_d0 <= iv_read_reg_498;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
            state_d0 <= grp_AES_Encrypt_ShiftRows_fu_301_state_d0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and (ap_const_lv1_0 = tmp_21_reg_552))) then 
            state_d0 <= grp_AES_Encrypt_MixColumns_fu_294_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_sig_156, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond1_reg_489_pp0_iter1, tmp_21_reg_552, ap_sig_cseq_ST_st15_fsm_12, ap_sig_cseq_ST_st17_fsm_14, grp_AES_Encrypt_MixColumns_fu_294_state_we0, grp_AES_Encrypt_ShiftRows_fu_301_state_we0, ap_sig_cseq_ST_st8_fsm_5, ap_sig_cseq_ST_st14_fsm_11, ap_sig_cseq_ST_st20_fsm_17, ap_sig_cseq_ST_st23_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_20) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_489_pp0_iter1)))) then 
            state_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_12)) then 
            state_we0 <= grp_AES_Encrypt_ShiftRows_fu_301_state_we0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) and (ap_const_lv1_0 = tmp_21_reg_552))) then 
            state_we0 <= grp_AES_Encrypt_MixColumns_fu_294_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum5_cast_fu_437_p1 <= std_logic_vector(resize(unsigned(sum5_fu_432_p2),64));
    sum5_fu_432_p2 <= std_logic_vector(unsigned(tmp_24_reg_556) + unsigned(tmp_74_cast_fu_428_p1));
    tmp_17_fu_351_p1 <= std_logic_vector(resize(unsigned(i_0_i1_reg_227),64));
    tmp_19_fu_454_p1 <= std_logic_vector(resize(unsigned(i_0_i_reg_272),64));
    tmp_1_i_fu_386_p1 <= std_logic_vector(resize(unsigned(reg_317),64));
    tmp_20_fu_460_p2 <= (state_q0 xor newState_q0);
    tmp_21_fu_391_p2 <= "1" when (i4_reg_238 = ap_const_lv4_9) else "0";
    tmp_22_fu_478_p1 <= std_logic_vector(resize(unsigned(indvar6_reg_283),64));
    tmp_23_fu_397_p3 <= (i4_reg_238 & ap_const_lv4_0);
    tmp_24_fu_405_p2 <= std_logic_vector(unsigned(tmp_23_fu_397_p3) + unsigned(ap_const_lv8_10));
    tmp_25_fu_423_p1 <= std_logic_vector(resize(unsigned(i_0_i2_reg_261),64));
    tmp_74_cast_fu_428_p1 <= std_logic_vector(resize(unsigned(i_0_i2_reg_261),8));
    tmp_i_fu_381_p1 <= std_logic_vector(resize(unsigned(i_i_reg_250),64));
    tmp_s_fu_334_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_215_pp0_iter1),64));
end behav;
