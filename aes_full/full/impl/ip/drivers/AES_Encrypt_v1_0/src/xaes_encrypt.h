// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XAES_ENCRYPT_H
#define XAES_ENCRYPT_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xaes_encrypt_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Crtlsc_BaseAddress;
} XAes_encrypt_Config;
#endif

typedef struct {
    u32 Crtlsc_BaseAddress;
    u32 IsReady;
} XAes_encrypt;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XAes_encrypt_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XAes_encrypt_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XAes_encrypt_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XAes_encrypt_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XAes_encrypt_Initialize(XAes_encrypt *InstancePtr, u16 DeviceId);
XAes_encrypt_Config* XAes_encrypt_LookupConfig(u16 DeviceId);
int XAes_encrypt_CfgInitialize(XAes_encrypt *InstancePtr, XAes_encrypt_Config *ConfigPtr);
#else
int XAes_encrypt_Initialize(XAes_encrypt *InstancePtr, const char* InstanceName);
int XAes_encrypt_Release(XAes_encrypt *InstancePtr);
#endif

void XAes_encrypt_Start(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_IsDone(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_IsIdle(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_IsReady(XAes_encrypt *InstancePtr);
void XAes_encrypt_EnableAutoRestart(XAes_encrypt *InstancePtr);
void XAes_encrypt_DisableAutoRestart(XAes_encrypt *InstancePtr);

void XAes_encrypt_Set_Nr(XAes_encrypt *InstancePtr, u32 Data);
u32 XAes_encrypt_Get_Nr(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_newState_BaseAddress(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_newState_HighAddress(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_newState_TotalBytes(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_newState_BitWidth(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_newState_Depth(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Write_newState_Words(XAes_encrypt *InstancePtr, int offset, int *data, int length);
u32 XAes_encrypt_Read_newState_Words(XAes_encrypt *InstancePtr, int offset, int *data, int length);
u32 XAes_encrypt_Write_newState_Bytes(XAes_encrypt *InstancePtr, int offset, char *data, int length);
u32 XAes_encrypt_Read_newState_Bytes(XAes_encrypt *InstancePtr, int offset, char *data, int length);
u32 XAes_encrypt_Get_expandedKey_BaseAddress(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_expandedKey_HighAddress(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_expandedKey_TotalBytes(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_expandedKey_BitWidth(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Get_expandedKey_Depth(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_Write_expandedKey_Words(XAes_encrypt *InstancePtr, int offset, int *data, int length);
u32 XAes_encrypt_Read_expandedKey_Words(XAes_encrypt *InstancePtr, int offset, int *data, int length);
u32 XAes_encrypt_Write_expandedKey_Bytes(XAes_encrypt *InstancePtr, int offset, char *data, int length);
u32 XAes_encrypt_Read_expandedKey_Bytes(XAes_encrypt *InstancePtr, int offset, char *data, int length);

void XAes_encrypt_InterruptGlobalEnable(XAes_encrypt *InstancePtr);
void XAes_encrypt_InterruptGlobalDisable(XAes_encrypt *InstancePtr);
void XAes_encrypt_InterruptEnable(XAes_encrypt *InstancePtr, u32 Mask);
void XAes_encrypt_InterruptDisable(XAes_encrypt *InstancePtr, u32 Mask);
void XAes_encrypt_InterruptClear(XAes_encrypt *InstancePtr, u32 Mask);
u32 XAes_encrypt_InterruptGetEnabled(XAes_encrypt *InstancePtr);
u32 XAes_encrypt_InterruptGetStatus(XAes_encrypt *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
