-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_Encrypt_MixColumns is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AES_Encrypt_MixColumns is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_33 : BOOLEAN;
    signal cipher_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce0 : STD_LOGIC;
    signal cipher_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce1 : STD_LOGIC;
    signal cipher_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce2 : STD_LOGIC;
    signal cipher_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal cipher_ce3 : STD_LOGIC;
    signal cipher_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_74 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_81 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_88 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_96 : BOOLEAN;
    signal reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_115 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_122 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_130 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_138 : BOOLEAN;
    signal reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_677 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_741 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_699_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_154 : BOOLEAN;
    signal grp_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_166 : BOOLEAN;
    signal grp_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_808_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1198 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_856_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1233 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1238 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_988_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1333 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_1036_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1363 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_1048_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1368 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_fu_1132_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1416 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_289 : BOOLEAN;
    signal tmp_16_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_1421 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_state_load_reg_1431 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_306 : BOOLEAN;
    signal tmp_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_state_ce0 : STD_LOGIC;
    signal tmp_state_we0 : STD_LOGIC;
    signal tmp_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_state_ce1 : STD_LOGIC;
    signal tmp_state_we1 : STD_LOGIC;
    signal tmp_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_626 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_329 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_336 : BOOLEAN;
    signal addr_fu_766_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr1_fu_775_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr2_fu_784_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr3_fu_793_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr4_fu_814_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr5_fu_823_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr6_fu_832_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr7_fu_841_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr8_fu_874_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr9_fu_883_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr10_fu_892_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr11_fu_901_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr12_fu_910_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr13_fu_919_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr14_fu_928_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr15_fu_937_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr16_fu_946_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr17_fu_955_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr18_fu_964_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr19_fu_973_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr20_fu_994_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr21_fu_1003_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr22_fu_1012_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr23_fu_1021_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr24_fu_1054_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr25_fu_1063_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr26_fu_1072_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr27_fu_1081_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr28_fu_1090_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr29_fu_1099_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr30_fu_1108_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal addr31_fu_1117_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_643_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_705_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_649_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_fu_850_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_862_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp18_fu_982_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp20_fu_1030_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp22_fu_1042_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component AES_Encrypt_MixColumns_cipher IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_Encrypt_ShiftRows_tmp_state IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cipher_U : component AES_Encrypt_MixColumns_cipher
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cipher_address0,
        ce0 => cipher_ce0,
        q0 => cipher_q0,
        address1 => cipher_address1,
        ce1 => cipher_ce1,
        q1 => cipher_q1,
        address2 => cipher_address2,
        ce2 => cipher_ce2,
        q2 => cipher_q2,
        address3 => cipher_address3,
        ce3 => cipher_ce3,
        q3 => cipher_q3);

    tmp_state_U : component AES_Encrypt_ShiftRows_tmp_state
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_state_address0,
        ce0 => tmp_state_ce0,
        we0 => tmp_state_we0,
        d0 => tmp_state_d0,
        q0 => tmp_state_q0,
        address1 => tmp_state_address1,
        ce1 => tmp_state_ce1,
        we1 => tmp_state_we1,
        d1 => tmp_state_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_626_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                i_reg_626 <= i_2_reg_1416;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                i_reg_626 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_655_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
                reg_655 <= state_q1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                reg_655 <= state_q0;
            end if; 
        end if;
    end process;

    reg_664_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                reg_664 <= state_q0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                reg_664 <= state_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                i_2_reg_1416 <= i_2_fu_1132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then
                reg_660 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then
                reg_669 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then
                reg_673 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then
                reg_677 <= state_q0;
                reg_741 <= grp_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then
                reg_746 <= grp_fu_699_p2;
                reg_751 <= grp_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then
                reg_756 <= grp_fu_723_p2;
                reg_761 <= grp_fu_735_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_10_reg_1363 <= tmp_10_fu_1036_p2;
                tmp_11_reg_1368 <= tmp_11_fu_1048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (exitcond_fu_1126_p2 = ap_const_lv1_0))) then
                    tmp_16_reg_1421(4 downto 0) <= tmp_16_fu_1138_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_1_reg_1198 <= tmp_1_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_3_reg_1238 <= tmp_3_fu_868_p2;
                tmp_s_reg_1233 <= tmp_s_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_8_reg_1333 <= tmp_8_fu_988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                tmp_state_load_reg_1431 <= tmp_state_q0;
            end if;
        end if;
    end process;
    tmp_16_reg_1421(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_1126_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if (not((exitcond_fu_1126_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    addr10_fu_892_p3 <= (ap_const_lv56_1 & reg_669);
    addr11_fu_901_p3 <= (ap_const_lv56_2 & reg_677);
    addr12_fu_910_p3 <= (ap_const_lv56_1 & reg_677);
    addr13_fu_919_p3 <= (ap_const_lv56_2 & reg_655);
    addr14_fu_928_p3 <= (ap_const_lv56_2 & reg_673);
    addr15_fu_937_p3 <= (ap_const_lv56_1 & reg_655);
    addr16_fu_946_p3 <= (ap_const_lv56_1 & reg_660);
    addr17_fu_955_p3 <= (ap_const_lv56_2 & reg_655);
    addr18_fu_964_p3 <= (ap_const_lv56_1 & reg_655);
    addr19_fu_973_p3 <= (ap_const_lv56_2 & reg_664);
    addr1_fu_775_p3 <= (ap_const_lv56_2 & reg_660);
    addr20_fu_994_p3 <= (ap_const_lv56_1 & reg_664);
    addr21_fu_1003_p3 <= (ap_const_lv56_2 & reg_669);
    addr22_fu_1012_p3 <= (ap_const_lv56_2 & reg_660);
    addr23_fu_1021_p3 <= (ap_const_lv56_1 & reg_669);
    addr24_fu_1054_p3 <= (ap_const_lv56_1 & reg_673);
    addr25_fu_1063_p3 <= (ap_const_lv56_2 & reg_669);
    addr26_fu_1072_p3 <= (ap_const_lv56_1 & reg_669);
    addr27_fu_1081_p3 <= (ap_const_lv56_2 & reg_677);
    addr28_fu_1090_p3 <= (ap_const_lv56_1 & reg_677);
    addr29_fu_1099_p3 <= (ap_const_lv56_2 & reg_655);
    addr2_fu_784_p3 <= (ap_const_lv56_1 & reg_660);
    addr30_fu_1108_p3 <= (ap_const_lv56_2 & reg_673);
    addr31_fu_1117_p3 <= (ap_const_lv56_1 & reg_655);
    addr3_fu_793_p3 <= (ap_const_lv56_2 & reg_664);
    addr4_fu_814_p3 <= (ap_const_lv56_1 & reg_664);
    addr5_fu_823_p3 <= (ap_const_lv56_2 & reg_669);
    addr6_fu_832_p3 <= (ap_const_lv56_2 & reg_655);
    addr7_fu_841_p3 <= (ap_const_lv56_1 & reg_669);
    addr8_fu_874_p3 <= (ap_const_lv56_1 & reg_673);
    addr9_fu_883_p3 <= (ap_const_lv56_2 & reg_669);
    addr_fu_766_p3 <= (ap_const_lv56_1 & reg_655);

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st14_fsm_13, exitcond_fu_1126_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((exitcond_fu_1126_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, exitcond_fu_1126_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((exitcond_fu_1126_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_115 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_122 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_130 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_138 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_154 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_166 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_289 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_306_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_306 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_329_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_329 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_33_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_33 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_336_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_336 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_74_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_74 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_81 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_88 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_96 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_96)
    begin
        if (ap_sig_96) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_154)
    begin
        if (ap_sig_154) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_166)
    begin
        if (ap_sig_166) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_329)
    begin
        if (ap_sig_329) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_289)
    begin
        if (ap_sig_289) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_306)
    begin
        if (ap_sig_306) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_336)
    begin
        if (ap_sig_336) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_33)
    begin
        if (ap_sig_33) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_74)
    begin
        if (ap_sig_74) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_115)
    begin
        if (ap_sig_115) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_122)
    begin
        if (ap_sig_122) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_81)
    begin
        if (ap_sig_81) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_88)
    begin
        if (ap_sig_88) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_130)
    begin
        if (ap_sig_130) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_138)
    begin
        if (ap_sig_138) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, addr_fu_766_p3, addr4_fu_814_p3, addr8_fu_874_p3, addr12_fu_910_p3, addr16_fu_946_p3, addr20_fu_994_p3, addr24_fu_1054_p3, addr28_fu_1090_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            cipher_address0 <= addr28_fu_1090_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            cipher_address0 <= addr24_fu_1054_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            cipher_address0 <= addr20_fu_994_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            cipher_address0 <= addr16_fu_946_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            cipher_address0 <= addr12_fu_910_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            cipher_address0 <= addr8_fu_874_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            cipher_address0 <= addr4_fu_814_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            cipher_address0 <= addr_fu_766_p3(10 - 1 downto 0);
        else 
            cipher_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_address1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, addr1_fu_775_p3, addr5_fu_823_p3, addr9_fu_883_p3, addr13_fu_919_p3, addr17_fu_955_p3, addr21_fu_1003_p3, addr25_fu_1063_p3, addr29_fu_1099_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            cipher_address1 <= addr29_fu_1099_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            cipher_address1 <= addr25_fu_1063_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            cipher_address1 <= addr21_fu_1003_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            cipher_address1 <= addr17_fu_955_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            cipher_address1 <= addr13_fu_919_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            cipher_address1 <= addr9_fu_883_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            cipher_address1 <= addr5_fu_823_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            cipher_address1 <= addr1_fu_775_p3(10 - 1 downto 0);
        else 
            cipher_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_address2_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, addr2_fu_784_p3, addr6_fu_832_p3, addr10_fu_892_p3, addr14_fu_928_p3, addr18_fu_964_p3, addr22_fu_1012_p3, addr26_fu_1072_p3, addr30_fu_1108_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            cipher_address2 <= addr30_fu_1108_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            cipher_address2 <= addr26_fu_1072_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            cipher_address2 <= addr22_fu_1012_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            cipher_address2 <= addr18_fu_964_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            cipher_address2 <= addr14_fu_928_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            cipher_address2 <= addr10_fu_892_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            cipher_address2 <= addr6_fu_832_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            cipher_address2 <= addr2_fu_784_p3(10 - 1 downto 0);
        else 
            cipher_address2 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_address3_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, addr3_fu_793_p3, addr7_fu_841_p3, addr11_fu_901_p3, addr15_fu_937_p3, addr19_fu_973_p3, addr23_fu_1021_p3, addr27_fu_1081_p3, addr31_fu_1117_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            cipher_address3 <= addr31_fu_1117_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            cipher_address3 <= addr27_fu_1081_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            cipher_address3 <= addr23_fu_1021_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            cipher_address3 <= addr19_fu_973_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            cipher_address3 <= addr15_fu_937_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            cipher_address3 <= addr11_fu_901_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            cipher_address3 <= addr7_fu_841_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            cipher_address3 <= addr3_fu_793_p3(10 - 1 downto 0);
        else 
            cipher_address3 <= "XXXXXXXXXX";
        end if; 
    end process;


    cipher_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            cipher_ce0 <= ap_const_logic_1;
        else 
            cipher_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            cipher_ce1 <= ap_const_logic_1;
        else 
            cipher_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_ce2_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            cipher_ce2 <= ap_const_logic_1;
        else 
            cipher_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_ce3_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            cipher_ce3 <= ap_const_logic_1;
        else 
            cipher_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_1126_p2 <= "1" when (i_reg_626 = ap_const_lv5_10) else "0";
    grp_fu_637_p2 <= (cipher_q1 xor cipher_q0);
    grp_fu_643_p2 <= (cipher_q2 xor cipher_q3);
    grp_fu_649_p2 <= (cipher_q0 xor cipher_q1);
    grp_fu_681_p2 <= (reg_664 xor reg_669);
    grp_fu_687_p2 <= (grp_fu_681_p2 xor grp_fu_637_p2);
    grp_fu_693_p2 <= (reg_677 xor reg_655);
    grp_fu_699_p2 <= (grp_fu_693_p2 xor grp_fu_637_p2);
    grp_fu_705_p2 <= (reg_655 xor reg_673);
    grp_fu_711_p2 <= (grp_fu_643_p2 xor grp_fu_705_p2);
    grp_fu_717_p2 <= (reg_669 xor reg_673);
    grp_fu_723_p2 <= (grp_fu_649_p2 xor grp_fu_717_p2);
    grp_fu_729_p2 <= (reg_677 xor reg_669);
    grp_fu_735_p2 <= (grp_fu_643_p2 xor grp_fu_729_p2);
    i_2_fu_1132_p2 <= std_logic_vector(unsigned(i_reg_626) + unsigned(ap_const_lv5_1));

    state_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, tmp_16_reg_1421, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            state_address0 <= tmp_16_reg_1421(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            state_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            state_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= tmp_state_load_reg_1431;

    state_we0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp18_fu_982_p2 <= (reg_669 xor reg_660);
    tmp20_fu_1030_p2 <= (reg_655 xor reg_660);
    tmp22_fu_1042_p2 <= (reg_664 xor reg_655);
    tmp3_fu_802_p2 <= (reg_669 xor reg_655);
    tmp5_fu_850_p2 <= (reg_660 xor reg_655);
    tmp7_fu_862_p2 <= (reg_664 xor reg_660);
    tmp_10_fu_1036_p2 <= (grp_fu_649_p2 xor tmp20_fu_1030_p2);
    tmp_11_fu_1048_p2 <= (grp_fu_643_p2 xor tmp22_fu_1042_p2);
    tmp_16_fu_1138_p1 <= std_logic_vector(resize(unsigned(i_reg_626),64));
    tmp_1_fu_808_p2 <= (grp_fu_643_p2 xor tmp3_fu_802_p2);
    tmp_3_fu_868_p2 <= (grp_fu_643_p2 xor tmp7_fu_862_p2);
    tmp_8_fu_988_p2 <= (grp_fu_643_p2 xor tmp18_fu_982_p2);
    tmp_s_fu_856_p2 <= (grp_fu_649_p2 xor tmp5_fu_850_p2);

    tmp_state_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13, tmp_16_fu_1138_p1, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            tmp_state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            tmp_state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            tmp_state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            tmp_state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            tmp_state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            tmp_state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            tmp_state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tmp_state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            tmp_state_address0 <= tmp_16_fu_1138_p1(4 - 1 downto 0);
        else 
            tmp_state_address0 <= "XXXX";
        end if; 
    end process;


    tmp_state_address1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            tmp_state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            tmp_state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            tmp_state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            tmp_state_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            tmp_state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            tmp_state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            tmp_state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tmp_state_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            tmp_state_address1 <= "XXXX";
        end if; 
    end process;


    tmp_state_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            tmp_state_ce0 <= ap_const_logic_1;
        else 
            tmp_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_state_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            tmp_state_ce1 <= ap_const_logic_1;
        else 
            tmp_state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_state_d0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, reg_741, reg_746, ap_sig_cseq_ST_st11_fsm_10, reg_756, ap_sig_cseq_ST_st12_fsm_11, tmp_s_reg_1233, tmp_10_reg_1363, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            tmp_state_d0 <= tmp_10_reg_1363;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            tmp_state_d0 <= reg_756;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            tmp_state_d0 <= reg_746;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            tmp_state_d0 <= tmp_s_reg_1233;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            tmp_state_d0 <= reg_741;
        else 
            tmp_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    tmp_state_d1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, reg_751, ap_sig_cseq_ST_st12_fsm_11, reg_761, tmp_1_reg_1198, tmp_3_reg_1238, tmp_8_reg_1333, tmp_11_reg_1368, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            tmp_state_d1 <= tmp_11_reg_1368;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            tmp_state_d1 <= tmp_8_reg_1333;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            tmp_state_d1 <= reg_761;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            tmp_state_d1 <= reg_751;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            tmp_state_d1 <= tmp_3_reg_1238;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tmp_state_d1 <= tmp_1_reg_1198;
        else 
            tmp_state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    tmp_state_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            tmp_state_we0 <= ap_const_logic_1;
        else 
            tmp_state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_state_we1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            tmp_state_we1 <= ap_const_logic_1;
        else 
            tmp_state_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
